lf[[1]]<- rep(0.1, 2^6)
lf[[1]][10:20] <-2
lf[[2]]<- rep(0.1, 2^6)
lf[[2]][50:60] <-2
true_pos <- sample(1:ncol(genotype), replace = FALSE,size=2)
plot (lf[[1]], type="l", main=paste ( "effect of SNP",true_pos[1]))
plot (lf[[2]], type="l", main=paste ( "effect of SNP",true_pos[2]))
pos1 <- true_pos[1]
pos2 <- true_pos[2]
if( length(which(apply(G,2,var)==0))>0){
G <- G[,-which(apply(G,2,var)==0)]
}
# G <- matrix( rnorm(nrow(genotype)*300), nrow = nrow(genotype))
predictor <-rep (0, length(lf[[1]] ))
count.data  <- list()
G[ , true_pos[1]] <-G[ , true_pos[1]] -min(G[ , true_pos[1]] )
G[ , true_pos[2]] <-G[ , true_pos[2]] -min(G[ , true_pos[2]] )
for ( i in 1:N)
{
predictor <-rep (0, length(lf[[1]] ))
for ( l in 1:L){
predictor <-predictor + G[i, true_pos[l]]*lf[[l]]+0.3
}
predictor <- exp( predictor+ rnorm(  length(lf[[1]]), sd=mysd))
count.data [[i]] <-   rpois(n= length(lf[[1]]) ,
lambda =predictor  )
}
count.data <- do.call(rbind, count.data)
Y <- count.data
res01 <-acc_Pois_fSuSiE2 (Y=Y,X=X, L=3 , post_processing = "HMM")
res01$susiF.obj$cs
plot ( exp( res01$susiF.obj$fitted_func[[2]]  )-1, type="l", main=paste ( "effect of SNP",true_pos[2]), col= "green4")
rm(list = ls())
library(mvPoisVA)
library(susiF.alpha)
library(susieR)
library(ebnm)
set.seed(1)
'%!in%' <- function(x,y)!('%in%'(x,y))
data(N3finemapping)
X <- N3finemapping$X
mysd=2
N =100
genotype <-X[1:N,1:100]
data(N3finemapping)
X <- N3finemapping$X
genotype <-X[sample(1:nrow(X), size=N),1:100]
idx <- which( apply( genotype,2, var ) <1e-15)
if( length(idx)==0){
X <-genotype
Rtrue <- cor (genotype )
}else{
genotype <- genotype [, -idx]
X <-genotype
}
G<- genotype
X <- (X -0.99*min(X))/(0.5*max(X ))
G <-  (G -0.99*min(G ))/(0.5*max(G ))
idx <- which( apply( genotype,2, var ) <1e-15)
if ( length(idx)>0){
genotype <- genotype [, -idx]
}
lev_res =6
count.data  <- list()
L <-2# sample(1:2, size =1)#actual number of effect
lf <-  list()
lf[[1]]<- rep(0.1, 2^6)
lf[[1]][10:20] <-2
lf[[2]]<- rep(0.1, 2^6)
lf[[2]][50:60] <-2
true_pos <- sample(1:ncol(genotype), replace = FALSE,size=2)
plot (lf[[1]], type="l", main=paste ( "effect of SNP",true_pos[1]))
plot (lf[[2]], type="l", main=paste ( "effect of SNP",true_pos[2]))
pos1 <- true_pos[1]
pos2 <- true_pos[2]
if( length(which(apply(G,2,var)==0))>0){
G <- G[,-which(apply(G,2,var)==0)]
}
# G <- matrix( rnorm(nrow(genotype)*300), nrow = nrow(genotype))
predictor <-rep (0, length(lf[[1]] ))
count.data  <- list()
G[ , true_pos[1]] <-G[ , true_pos[1]] -min(G[ , true_pos[1]] )
G[ , true_pos[2]] <-G[ , true_pos[2]] -min(G[ , true_pos[2]] )
for ( i in 1:N)
{
predictor <-rep (0, length(lf[[1]] ))
for ( l in 1:L){
predictor <-predictor + G[i, true_pos[l]]*lf[[l]]+0.3
}
predictor <- exp( predictor+ rnorm(  length(lf[[1]]), sd=mysd))
count.data [[i]] <-   rpois(n= length(lf[[1]]) ,
lambda =predictor  )
}
count.data <- do.call(rbind, count.data)
Y <- count.data
res01 <-acc_Pois_fSuSiE2 (Y=Y,X=X, L=3 , post_processing = "HMM")
res01$susiF.obj$cs
plot ( exp( res01$susiF.obj$fitted_func[[2]]  )-1, type="l", main=paste ( "effect of SNP",true_pos[2]), col= "green4")
lines(lf[[1]])
plot (exp( res01$susiF.obj$fitted_func[[1]]  )-1 , type="l", main=paste ( "effect of SNP",true_pos[2]), col= "green4")
lines(lf[[2]] )
rm(list = ls())
library(mvPoisVA)
library(susiF.alpha)
library(susieR)
library(ebnm)
set.seed(1)
'%!in%' <- function(x,y)!('%in%'(x,y))
data(N3finemapping)
X <- N3finemapping$X
mysd=2
N =70
genotype <-X[1:N,1:100]
data(N3finemapping)
X <- N3finemapping$X
genotype <-X[sample(1:nrow(X), size=N),1:100]
idx <- which( apply( genotype,2, var ) <1e-15)
if( length(idx)==0){
X <-genotype
Rtrue <- cor (genotype )
}else{
genotype <- genotype [, -idx]
X <-genotype
}
G<- genotype
X <- (X -0.99*min(X))/(0.5*max(X ))
G <-  (G -0.99*min(G ))/(0.5*max(G ))
idx <- which( apply( genotype,2, var ) <1e-15)
if ( length(idx)>0){
genotype <- genotype [, -idx]
}
lev_res =6
count.data  <- list()
L <-2# sample(1:2, size =1)#actual number of effect
lf <-  list()
lf[[1]]<- rep(0.1, 2^6)
lf[[1]][10:20] <-2
lf[[2]]<- rep(0.1, 2^6)
lf[[2]][50:60] <-2
true_pos <- sample(1:ncol(genotype), replace = FALSE,size=2)
plot (lf[[1]], type="l", main=paste ( "effect of SNP",true_pos[1]))
plot (lf[[2]], type="l", main=paste ( "effect of SNP",true_pos[2]))
pos1 <- true_pos[1]
pos2 <- true_pos[2]
if( length(which(apply(G,2,var)==0))>0){
G <- G[,-which(apply(G,2,var)==0)]
}
# G <- matrix( rnorm(nrow(genotype)*300), nrow = nrow(genotype))
predictor <-rep (0, length(lf[[1]] ))
count.data  <- list()
G[ , true_pos[1]] <-G[ , true_pos[1]] -min(G[ , true_pos[1]] )
G[ , true_pos[2]] <-G[ , true_pos[2]] -min(G[ , true_pos[2]] )
for ( i in 1:N)
{
predictor <-rep (0, length(lf[[1]] ))
for ( l in 1:L){
predictor <-predictor + G[i, true_pos[l]]*lf[[l]]+0.3
}
predictor <- exp( predictor+ rnorm(  length(lf[[1]]), sd=mysd))
count.data [[i]] <-   rpois(n= length(lf[[1]]) ,
lambda =predictor  )
}
count.data <- do.call(rbind, count.data)
Y <- count.data
res01 <-acc_Pois_fSuSiE2 (Y=Y,X=X, L=3 , post_processing = "HMM")
res01$susiF.obj$cs
true_pos
plot (exp( res01$susiF.obj$fitted_func[[1]]  )-1 , type="l", main=paste ( "effect of SNP",true_pos[2]), col= "green4")
lines(lf[[2]] )
library(mvPoisVA)
library(susiF.alpha)
library(susieR)
library(ebnm)
thin_base <- function (mat, designmat, coefmat, relative = TRUE, type = c("thin",
"mult"))
{
assertthat::assert_that(is.matrix(mat))
assertthat::assert_that(is.matrix(designmat))
assertthat::assert_that(is.matrix(coefmat))
assertthat::assert_that(is.numeric(mat))
assertthat::assert_that(is.numeric(designmat))
assertthat::assert_that(is.numeric(coefmat))
assertthat::are_equal(nrow(mat), nrow(coefmat))
assertthat::are_equal(ncol(mat), nrow(designmat))
assertthat::are_equal(ncol(designmat), ncol(coefmat))
assertthat::assert_that(is.logical(relative))
assertthat::are_equal(1L, length(relative))
stopifnot(mat >= 0)
type <- match.arg(type)
meanmat <- tcrossprod(coefmat, designmat)
maxvec <- apply(meanmat, 1, max)
if (!relative) {
if (any(maxvec > 0)) {
stop(paste0("thin_base: tcrossprod(coefmat, designmat) produced positive entries\n",
"       and relative = FALSE. Either set relative = TRUE or change your\n",
"       coefficient and design matrices."))
}
qmat <- 2^meanmat
}
else {
qmat <- 2^(meanmat - maxvec)
}
if (type == "thin") {
newmat <- stats::rbinom(n = prod(dim(mat)), size = mat,
prob = qmat)
}
else if (type == "mult") {
newmat <- round(qmat * mat)
}
dim(newmat) <- dim(mat)
return(newmat)
}
'%!in%' <- function(x,y)!('%in%'(x,y))
data(N3finemapping)
X <- N3finemapping$X
mysd=2
L=2
N =50
genotype <-X[1:N,1:100]
idx <- which( apply( genotype,2, var ) <1e-15)
genotype <- genotype [, -idx]
lev_res =8
count.data  <- list()
Y <- matrix ( rpois(N* 2^(lev_res), lambda = 10), ncol = 2^(lev_res))
image (Y)
X <- N3finemapping$X
true_pos <- sample(1:ncol(genotype), L)
lf <-  list()
for(l in 1:L){
lf[[l]] <- rep (0, 2^lev_res)
idx <- sample( size =1,1:( -20+ 2^lev_res))
lf[[l]][(idx: (idx+10))] <-1
#functional effect for effect l
}
B <- do.call(cbind, lf)
Ynew <- t(thin_base(mat = t(Y), designmat = genotype[, true_pos], coefmat = B))
plot (Ynew,Y)
res01 <-acc_Pois_fSuSiE2(Y= Ynew ,X=genotype, L=3 , post_processing = "HMM")
true_pos
plot (res01$susiF.obj$fitted_func[[1]])
lines(res01$susiF.obj$lfsr_func[[1]], col="red")
lines(lf[[1]])
lines(lf[[2]])
plot (res01$susiF.obj$fitted_func[[2]])
lines(res01$susiF.obj$lfsr_func[[2]], col="red")
lines(lf[[2]])
false_disc1 <- -9
true_disc1  <- -9
false_disc2 <- -9
true_disc2  <- -9
if ( true_pos[1] %in% res01$susiF.obj$cs[[1]]){
no_zero1 <-  which(res01$susiF.obj$lfsr_func[[1]] <0.05
)
if (length(no_zero1)>0){
false_disc1 <- length( which ( no_zero1 %!in% which(lf[[1]]>0)))
true_disc1 <- length(which ( no_zero1 %in% which(lf[[1]]>0)))
}
}
if ( length(res01$susiF.obj$cs)>1){
if ( true_pos[1] %in% res01$susiF.obj$cs[[2]]){
no_zero1 <-  which(res01$susiF.obj$lfsr_func[[2]] <0.05)
if (length(no_zero1)>0){
false_disc1 <- length( which ( no_zero1 %!in% which(lf[[1]]>0)))
true_disc1 <- length(which ( no_zero1 %in% which(lf[[1]]>0)))
}
}
}
if ( true_pos[2] %in% res01$susiF.obj$cs[[1]]){
no_zero2 <-  which(res01$susiF.obj$lfsr_func[[1]] <0.05 )
if (length(no_zero2)>0){
false_disc2 <- length( which ( no_zero2 %!in% which(lf[[2]]>0)))
true_disc2 <- length(which ( no_zero2 %in% which(lf[[2]]>0)))
}
}
if ( length(res01$susiF.obj$cs)>1){
if ( true_pos[2] %in% res01$susiF.obj$cs[[2]]){
no_zero2 <-  which(res01$susiF.obj$lfsr_func[[2]] <0.05
)
if (length(no_zero2)>0){
false_disc2 <- length( which ( no_zero2 %!in% which(lf[[2]]>0)))
true_disc2 <- length(which ( no_zero2 %in% which(lf[[2]]>0)))
}
}
}
perf = c( false_disc1  ,
true_disc1   ,
false_disc2   ,
true_disc2   )
perf
rm(list = ls())
library(mvPoisVA)
library(fsusieR)
library(susieR)
library(ebnm)
data(N3finemapping)
X <- N3finemapping$X
mysd=0.2
N =50
genotype <-X[1:N,1:100]
idx <- which( apply( genotype,2, var ) <1e-15)
genotype <- genotype [, -idx]
lev_res =6
count.data  <- list()
L <-2# sample(1:2, size =1)#actual number of effect
lf <-  list()
lf[[1]]<- rep(0.1, 2^6)
lf[[1]][10:20] <-2
lf[[2]]<- rep(0.1, 2^6)
lf[[2]][50:60] <-2
mu= lf[[2]]
x = rpois(length(mu),exp(log(mu)+rnorm(n=length(mu),sd=mysd)))
fit = pois_smooth_split(x,maxiter=30)
plot(x,col='grey80')
lines(exp(fit$Eb))
lines( smashr::smash(haarfisz::hft(x))  , col="green")
lines(lf[[2]])
data(N3finemapping)
X <- N3finemapping$X
genotype <-X[sample(1:nrow(X), size=N),1:100]
idx <- which( apply( genotype,2, var ) <1e-15)
if( length(idx)==0){
X <-genotype
Rtrue <- cor (genotype )
}else{
genotype <- genotype [, -idx]
X <-genotype
}
G<- genotype
X <- (X -0.99*min(X))/(0.5*max(X ))
G <-  (G -0.99*min(G ))/(0.5*max(G ))
tpos <- sample(1:ncol(genotype), replace = FALSE,size=2)
true_pos <- tpos
pos1 <- tpos[1]
pos2 <- tpos[2]
if( length(which(apply(G,2,var)==0))>0){
G <- G[,-which(apply(G,2,var)==0)]
}
# G <- matrix( rnorm(nrow(genotype)*300), nrow = nrow(genotype))
predictor <-rep (0, length(lf[[1]] ))
count.data  <- list()
G[ , true_pos[1]] <-G[ , true_pos[1]] -min(G[ , true_pos[1]] )
G[ , true_pos[2]] <-G[ , true_pos[2]] -min(G[ , true_pos[2]] )
for ( i in 1:N)
{
predictor <-rep (0, length(lf[[1]] ))
for ( l in 1:L){
predictor <-predictor + G[i, true_pos[l]]*lf[[l]]+0.3
}
predictor <- exp( predictor + rnorm(  length(lf[[1]]), sd=mysd))
count.data [[i]] <-   rpois(n= length(lf[[1]]) ,
lambda =predictor  )
}
count.data <- do.call(rbind, count.data)
Y <- count.data
res3<-  acc_Pois_fSuSiE2 (Y=Y,X=X, L=3 , post_processing = "HMM")
res31 <- acc_Pois_fSuSiE2 (Y=Y,X=X, L=3 , post_processing = "HMM", cal_obj.fsusie = TRUE)
res3$susiF.obj$cs
res31$susiF.obj$cs
true_pos
res0 <-susiF (Y=log(Y+1),X=X, L=3, post_processing = "HMM")
res0$cs
res01 <-HF_susiF2  (Y=Y,X=X, L=3 , post_processing = "HMM")
rm(list = ls())
library(mvPoisVA)
library(fsusieR)
library(susieR)
library(ebnm)
data(N3finemapping)
X <- N3finemapping$X
mysd=0.2
N =50
genotype <-X[1:N,1:100]
idx <- which( apply( genotype,2, var ) <1e-15)
genotype <- genotype [, -idx]
lev_res =6
count.data  <- list()
L <-2# sample(1:2, size =1)#actual number of effect
lf <-  list()
lf[[1]]<- rep(0.1, 2^6)
lf[[1]][10:20] <-2
lf[[2]]<- rep(0.1, 2^6)
lf[[2]][50:60] <-2
mu= lf[[2]]
x = rpois(length(mu),exp(log(mu)+rnorm(n=length(mu),sd=mysd)))
fit = pois_smooth_split(x,maxiter=30)
plot(x,col='grey80')
lines(exp(fit$Eb))
lines( smashr::smash(haarfisz::hft(x))  , col="green")
lines(lf[[2]])
data(N3finemapping)
X <- N3finemapping$X
genotype <-X[sample(1:nrow(X), size=N),1:100]
idx <- which( apply( genotype,2, var ) <1e-15)
if( length(idx)==0){
X <-genotype
Rtrue <- cor (genotype )
}else{
genotype <- genotype [, -idx]
X <-genotype
}
G<- genotype
X <- (X -0.99*min(X))/(0.5*max(X ))
G <-  (G -0.99*min(G ))/(0.5*max(G ))
tpos <- sample(1:ncol(genotype), replace = FALSE,size=2)
true_pos <- tpos
pos1 <- tpos[1]
pos2 <- tpos[2]
if( length(which(apply(G,2,var)==0))>0){
G <- G[,-which(apply(G,2,var)==0)]
}
# G <- matrix( rnorm(nrow(genotype)*300), nrow = nrow(genotype))
predictor <-rep (0, length(lf[[1]] ))
count.data  <- list()
G[ , true_pos[1]] <-G[ , true_pos[1]] -min(G[ , true_pos[1]] )
G[ , true_pos[2]] <-G[ , true_pos[2]] -min(G[ , true_pos[2]] )
for ( i in 1:N)
{
predictor <-rep (0, length(lf[[1]] ))
for ( l in 1:L){
predictor <-predictor + G[i, true_pos[l]]*lf[[l]]+0.3
}
predictor <- exp( predictor + rnorm(  length(lf[[1]]), sd=mysd))
count.data [[i]] <-   rpois(n= length(lf[[1]]) ,
lambda =predictor  )
}
count.data <- do.call(rbind, count.data)
Y <- count.data
res3<-  acc_Pois_fSuSiE2 (Y=Y,X=X, L=3 , post_processing = "HMM")
res31 <- acc_Pois_fSuSiE2 (Y=Y,X=X, L=3 , post_processing = "HMM", cal_obj.fsusie = TRUE)
res3$susiF.obj$cs
res31$susiF.obj$cs
true_pos
res0 <-susiF (Y=log(Y+1),X=X, L=3, post_processing = "HMM")
res0$cs
res01 <-HF_susiF2  (Y=Y,X=X, L=3 , post_processing = "HMM")
rm(list = ls())
library(mvPoisVA)
library(fsusieR)
library(susieR)
library(ebnm)
data(N3finemapping)
X <- N3finemapping$X
mysd=0.2
N =50
genotype <-X[1:N,1:100]
idx <- which( apply( genotype,2, var ) <1e-15)
genotype <- genotype [, -idx]
lev_res =6
count.data  <- list()
L <-2# sample(1:2, size =1)#actual number of effect
lf <-  list()
lf[[1]]<- rep(0.1, 2^6)
lf[[1]][10:20] <-2
lf[[2]]<- rep(0.1, 2^6)
lf[[2]][50:60] <-2
mu= lf[[2]]
x = rpois(length(mu),exp(log(mu)+rnorm(n=length(mu),sd=mysd)))
fit = pois_smooth_split(x,maxiter=30)
plot(x,col='grey80')
lines(exp(fit$Eb))
lines( smashr::smash(haarfisz::hft(x))  , col="green")
lines(lf[[2]])
data(N3finemapping)
X <- N3finemapping$X
genotype <-X[sample(1:nrow(X), size=N),1:100]
idx <- which( apply( genotype,2, var ) <1e-15)
if( length(idx)==0){
X <-genotype
Rtrue <- cor (genotype )
}else{
genotype <- genotype [, -idx]
X <-genotype
}
G<- genotype
X <- (X -0.99*min(X))/(0.5*max(X ))
G <-  (G -0.99*min(G ))/(0.5*max(G ))
tpos <- sample(1:ncol(genotype), replace = FALSE,size=2)
true_pos <- tpos
pos1 <- tpos[1]
pos2 <- tpos[2]
if( length(which(apply(G,2,var)==0))>0){
G <- G[,-which(apply(G,2,var)==0)]
}
# G <- matrix( rnorm(nrow(genotype)*300), nrow = nrow(genotype))
predictor <-rep (0, length(lf[[1]] ))
count.data  <- list()
G[ , true_pos[1]] <-G[ , true_pos[1]] -min(G[ , true_pos[1]] )
G[ , true_pos[2]] <-G[ , true_pos[2]] -min(G[ , true_pos[2]] )
for ( i in 1:N)
{
predictor <-rep (0, length(lf[[1]] ))
for ( l in 1:L){
predictor <-predictor + G[i, true_pos[l]]*lf[[l]]+0.3
}
predictor <- exp( predictor + rnorm(  length(lf[[1]]), sd=mysd))
count.data [[i]] <-   rpois(n= length(lf[[1]]) ,
lambda =predictor  )
}
count.data <- do.call(rbind, count.data)
Y <- count.data
res3<-  acc_Pois_fSuSiE2 (Y=Y,X=X, L=3 , post_processing = "HMM")
Y_0 <-  Y
Y    <- HFT(Y)
fsusieR::susiF (
Y               =  Y ,
X               = X,
L               =4)
tada  = fsusieR::susiF (
Y               =  Y ,
X               = X,
L               =4,
post_processing="HMM")
