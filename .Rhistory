#  'ind_poisson_smoothing',
#  'nugget')
rm(list = ls())
library(mvPoisVA)
library(fsusieR)
library(susieR)
data(N3finemapping)
X <- N3finemapping$X
mysd=0.2
N =50
genotype <-X[1:N,1:100]
idx <- which( apply( genotype,2, var ) <1e-15)
genotype <- genotype [, -idx]
lev_res =6
count.data  <- list()
L <-2# sample(1:2, size =1)#actual number of effect
lf <-  list()
lf[[1]]<- rep(0.1, 2^6)
lf[[1]][10:20] <-2
lf[[2]]<- rep(0.1, 2^6)
lf[[2]][50:60] <-2
mu= lf[[2]]
x = rpois(length(mu),exp(log(mu)+rnorm(n=length(mu),sd=mysd)))
fit = pois_smooth_split(x,maxiter=30)
plot(x,col='grey80')
lines(exp(fit$Eb))
lines( smashr::smash(haarfisz::hft(x))  , col="green")
lines(lf[[2]])
data(N3finemapping)
X <- N3finemapping$X
genotype <-X[sample(1:nrow(X), size=N),1:100]
idx <- which( apply( genotype,2, var ) <1e-15)
if( length(idx)==0){
X <-genotype
Rtrue <- cor (genotype )
}else{
genotype <- genotype [, -idx]
X <-genotype
}
G<- genotype
X <- (X -0.99*min(X))/(0.5*max(X ))
G <-  (G -0.99*min(G ))/(0.5*max(G ))
tpos <- sample(1:ncol(genotype), replace = FALSE,size=2)
true_pos <- tpos
pos1 <- tpos[1]
pos2 <- tpos[2]
if( length(which(apply(G,2,var)==0))>0){
G <- G[,-which(apply(G,2,var)==0)]
}
# G <- matrix( rnorm(nrow(genotype)*300), nrow = nrow(genotype))
predictor <-rep (0, length(lf[[1]] ))
count.data  <- list()
G[ , true_pos[1]] <-G[ , true_pos[1]] -min(G[ , true_pos[1]] )
G[ , true_pos[2]] <-G[ , true_pos[2]] -min(G[ , true_pos[2]] )
for ( i in 1:N)
{
predictor <-rep (0, length(lf[[1]] ))
for ( l in 1:L){
predictor <-predictor + G[i, true_pos[l]]*lf[[l]]+0.3
}
predictor <- exp( predictor + rnorm(  length(lf[[1]]), sd=mysd))
count.data [[i]] <-   rpois(n= length(lf[[1]]) ,
lambda =predictor  )
}
count.data <- do.call(rbind, count.data)
Y <- count.data
res01 <-acc_Pois_fSuSiE2 (Y=Y,X=X, L=3 , post_processing = "HMM")
#c('pois_mean_split',
#  'ind_pois_mean_split',
#  'ebps' ,
#  'ind_ebps',
#  'ind_poisson_smoothing',
#  'nugget')
res02 <-acc_Pois_fSuSiE2 (Y=Y,X=X, L=3 , post_processing = "HMM",
ebp ='ind_pois_mean_split' )
res03 <-acc_Pois_fSuSiE2 (Y=Y,X=X, L=3 , post_processing = "HMM",
ebp ='ind_ebps' )
res04 <-acc_Pois_fSuSiE2 (Y=Y,X=X, L=3 , post_processing = "HMM",
ebp ='ind_poisson_smoothing' )
plot(exp(res02$susiF.obj$fitted_func[[1]])-1)
lines(exp(res01$susiF.obj$fitted_func[[1]])-1, col=2)
lines(exp(res03$susiF.obj$fitted_func[[1]])-1, col=3)
lines(exp(res03$susiF.obj$fitted_func[[1]])-1, col=4)
plot(exp(res02$susiF.obj$fitted_func[[2]])-1)
lines(exp(res01$susiF.obj$fitted_func[[2]])-1, col=2)
lines(exp(res03$susiF.obj$fitted_func[[2]])-1, col=3)
lines(exp(res03$susiF.obj$fitted_func[[2]])-1, col=4)
plot(exp(res02$susiF.obj$fitted_func[[1]])-1, xlim=c(0,4)))
plot(exp(res02$susiF.obj$fitted_func[[1]])-1, ylim=c(0,4)))
plot(exp(res02$susiF.obj$fitted_func[[1]])-1, ylim=c(0,4))
lines(exp(res01$susiF.obj$fitted_func[[1]])-1, col=2)
lines(exp(res03$susiF.obj$fitted_func[[1]])-1, col=3)
lines(exp(res03$susiF.obj$fitted_func[[1]])-1, col=4)
plot(exp(res02$susiF.obj$fitted_func[[1]])-1, ylim=c(0,4))
lines(exp(res01$susiF.obj$fitted_func[[1]])-1, col=2)
lines(exp(res03$susiF.obj$fitted_func[[1]])-1, col=3)
plot(exp(res02$susiF.obj$fitted_func[[1]])-1, ylim=c(0,4))
lines(exp(res01$susiF.obj$fitted_func[[1]])-1, col=2)
lines(exp(res03$susiF.obj$fitted_func[[1]])-1, col=3)
lines(exp(res03$susiF.obj$fitted_func[[1]])-1, col=4)
res04 <-acc_Pois_fSuSiE2 (Y=Y,X=X, L=3 ,
ebp ='ind_poisson_smoothing' )
source("C:/Document/Serieux/Travail/Package/mvPoisVA/R/accelerated_Pois_fSuSiE2.R", echo=TRUE)
res04 <-acc_Pois_fSuSiE2 (Y=Y,X=X, L=3 ,
ebp ='ind_poisson_smoothing' )
source("C:/Document/Serieux/Travail/Package/mvPoisVA/R/accelerated_Pois_fSuSiE2.R", echo=TRUE)
Y <- count.data
res01 <-acc_Pois_fSuSiE2 (Y=Y,X=X, L=3 , post_processing = "HMM")
#c('pois_mean_split',
#  'ind_pois_mean_split',
#  'ebps' ,
#  'ind_ebps',
#  'ind_poisson_smoothing',
#  'nugget')
res02 <-acc_Pois_fSuSiE2 (Y=Y,X=X, L=3 ,
ebps_method='ind_pois_mean_split' )
res03 <-acc_Pois_fSuSiE2 (Y=Y,X=X, L=3  ,
ebps_method ='ind_ebps' )
res04 <-acc_Pois_fSuSiE2 (Y=Y,X=X, L=3 ,
ebps_method ='ind_poisson_smoothing' )
knitr::opts_chunk$set(echo = TRUE)
library(mvPoisVA)
library(fsusieR)
library(susieR)
#example from Dongyue Xie work
set.seed(12345)
n=2^9
sigma=0.5
mu=c(rep(0.3,n/4), rep(3, n/4), rep(10, n/4), rep(0.3, n/4))
plot(mu, type="l", main="Underlying intensity")
set.seed(123)
x = rpois(length(mu),exp(log(mu)+rnorm(n=length(mu),sd=sigma)))
plot(mu, type="l", main="Underlying intensity")
fit = pois_smooth_split(x,maxiter=30)
fit_ebps = ebps(x)
fit_pois = pois_mean_split(x)
plot(x,col='grey80')
lines(fit_pois$posterior$mean, col= "magenta", lwd=.5)
lines(fit_ebps$posterior$mean_smooth, col= "orange2", lwd=1.5)
lines(exp(fit$Eb), col= "blue3", lwd=1.5)
lines( smashr::smash(haarfisz::hft(x))  , col="darkgreen", lwd=1.5)
lines(mu, lwd=1.5)
legend(x="topleft", legend=c("Poisson smoothing", "EBPS", "Split Poisson", "Haar-Fisz", "True"),
col=c("blue3", "orange2", "magenta", "darkgreen", "black"),
lwd=1.5)
sqrt(fit_ebps$fitted_g$sigma2)
sqrt(fit$sigma2)
rm(list = ls())
library(mvPoisVA)
library(susiF.alpha)
library(susieR)
library(ebnm)
set.seed(1)
'%!in%' <- function(x,y)!('%in%'(x,y))
data(N3finemapping)
X <- N3finemapping$X
mysd=2
N =70
genotype <-X[1:N,1:100]
data(N3finemapping)
X <- N3finemapping$X
genotype <-X[sample(1:nrow(X), size=N),1:100]
idx <- which( apply( genotype,2, var ) <1e-15)
if( length(idx)==0){
X <-genotype
Rtrue <- cor (genotype )
}else{
genotype <- genotype [, -idx]
X <-genotype
}
G<- genotype
X <- (X -0.99*min(X))/(0.5*max(X ))
G <-  (G -0.99*min(G ))/(0.5*max(G ))
idx <- which( apply( genotype,2, var ) <1e-15)
if ( length(idx)>0){
genotype <- genotype [, -idx]
}
lev_res =6
count.data  <- list()
L <-2# sample(1:2, size =1)#actual number of effect
lf <-  list()
lf[[1]]<- rep(0.1, 2^6)
lf[[1]][10:20] <-2
lf[[2]]<- rep(0.1, 2^6)
lf[[2]][50:60] <-2
true_pos <- sample(1:ncol(genotype), replace = FALSE,size=2)
plot (lf[[1]], type="l", main=paste ( "effect of SNP",true_pos[1]))
plot (lf[[2]], type="l", main=paste ( "effect of SNP",true_pos[2]))
pos1 <- true_pos[1]
pos2 <- true_pos[2]
if( length(which(apply(G,2,var)==0))>0){
G <- G[,-which(apply(G,2,var)==0)]
}
# G <- matrix( rnorm(nrow(genotype)*300), nrow = nrow(genotype))
predictor <-rep (0, length(lf[[1]] ))
count.data  <- list()
G[ , true_pos[1]] <-G[ , true_pos[1]] -min(G[ , true_pos[1]] )
G[ , true_pos[2]] <-G[ , true_pos[2]] -min(G[ , true_pos[2]] )
for ( i in 1:N)
{
predictor <-rep (0, length(lf[[1]] ))
for ( l in 1:L){
predictor <-predictor + G[i, true_pos[l]]*lf[[l]]+0.3
}
predictor <- exp( predictor+ rnorm(  length(lf[[1]]), sd=mysd))
count.data [[i]] <-   rpois(n= length(lf[[1]]) ,
lambda =predictor  )
}
count.data <- do.call(rbind, count.data)
Y <- count.data
res01 <-acc_Pois_fSuSiE2 (Y=Y,X=X, L=3 , post_processing = "HMM")
res01$susiF.obj$cs
plot ( exp( res01$susiF.obj$fitted_func[[2]]  )-1, type="l", main=paste ( "effect of SNP",true_pos[2]), col= "green4")
rm(list = ls())
library(mvPoisVA)
library(fsusieR)
library(susieR)
library(ebnm)
data(N3finemapping)
X <- N3finemapping$X
mysd=0.2
N =50
genotype <-X[1:N,1:100]
idx <- which( apply( genotype,2, var ) <1e-15)
genotype <- genotype [, -idx]
lev_res =6
count.data  <- list()
L <-2# sample(1:2, size =1)#actual number of effect
lf <-  list()
lf[[1]]<- rep(0.1, 2^6)
lf[[1]][10:20] <-2
lf[[2]]<- rep(0.1, 2^6)
lf[[2]][50:60] <-2
mu= lf[[2]]
x = rpois(length(mu),exp(log(mu)+rnorm(n=length(mu),sd=mysd)))
fit = pois_smooth_split(x,maxiter=30)
plot(x,col='grey80')
lines(exp(fit$Eb))
lines( smashr::smash(haarfisz::hft(x))  , col="green")
lines(lf[[2]])
data(N3finemapping)
X <- N3finemapping$X
genotype <-X[sample(1:nrow(X), size=N),1:100]
idx <- which( apply( genotype,2, var ) <1e-15)
if( length(idx)==0){
X <-genotype
Rtrue <- cor (genotype )
}else{
genotype <- genotype [, -idx]
X <-genotype
}
G<- genotype
X <- (X -0.99*min(X))/(0.5*max(X ))
G <-  (G -0.99*min(G ))/(0.5*max(G ))
tpos <- sample(1:ncol(genotype), replace = FALSE,size=2)
true_pos <- tpos
pos1 <- tpos[1]
pos2 <- tpos[2]
if( length(which(apply(G,2,var)==0))>0){
G <- G[,-which(apply(G,2,var)==0)]
}
# G <- matrix( rnorm(nrow(genotype)*300), nrow = nrow(genotype))
predictor <-rep (0, length(lf[[1]] ))
count.data  <- list()
G[ , true_pos[1]] <-G[ , true_pos[1]] -min(G[ , true_pos[1]] )
G[ , true_pos[2]] <-G[ , true_pos[2]] -min(G[ , true_pos[2]] )
for ( i in 1:N)
{
predictor <-rep (0, length(lf[[1]] ))
for ( l in 1:L){
predictor <-predictor + G[i, true_pos[l]]*lf[[l]]+0.3
}
predictor <- exp( predictor + rnorm(  length(lf[[1]]), sd=mysd))
count.data [[i]] <-   rpois(n= length(lf[[1]]) ,
lambda =predictor  )
}
count.data <- do.call(rbind, count.data)
Y <- count.data
res3<-  acc_Pois_fSuSiE2 (Y=Y,X=X, L=3 , post_processing = "HMM")
res31 <- acc_Pois_fSuSiE2 (Y=Y,X=X, L=3 , post_processing = "HMM", cal_obj.fsusie = TRUE)
res3$susiF.obj$cs
res31$susiF.obj$cs
true_pos
res0 <-susiF (Y=log(Y+1),X=X, L=3, post_processing = "HMM")
res0$cs
res01 <-HF_susiF2  (Y=Y,X=X, L=3 , post_processing = "HMM")
res01$cs
Y_t  <-fit_latent_space(Y )
Y_t1  <-fit_latent_nugget(Y )
plot(Y_t $Y, log(Y+1) )
points(log(Y_t1 $Y), log(Y+1), col="green")
abline(a=0,b=1)
res02 <-susiF (Y=Y_t$Y,X=X, L=3, post_processing = "HMM")
res02$cs
true_pos
plot ( exp( res3$susiF.obj$fitted_func[[1]]  )-1)
lines(res3$susiF.obj$lfsr_func[[1]])
lines ( exp( res31$susiF.obj$fitted_func[[1]]  )-1)
lines(res31$susiF.obj$lfsr_func[[1]])
plot ( exp( res3$susiF.obj$fitted_func[[2]]  )-1)
lines(res3$susiF.obj$lfsr_func[[2]])
lines ( exp( res31$susiF.obj$fitted_func[[2]]  )-1)
lines(res31$susiF.obj$lfsr_func[[2]])
plot ( exp( res3$susiF.obj$fitted_func[[2]]  )-1)
lines(res3$susiF.obj$lfsr_func[[2]])
plot(lf[[1]], ylim= c( min (lf[[1]])-1, max(lf[[1]])+1) )
lines(res01$fitted_func[[1]], col='blue')
lines ( exp(  res3$susiF.obj$fitted_func[[1]]/ sqrt(var(X[, true_pos[1]])   ))-1, col='red')
lines ( res0$fitted_func[[1]], col='green')
lines ( exp(res02$fitted_func[[1]])-1, col='lightblue')
lines (exp( res31$susiF.obj$fitted_func[[1]])-1, col='blue4')
plot(lf[[2]], ylim= c( min (lf[[2]])-1, max(lf[[2]])+1) )
lines(res01$fitted_func[[2]], col='blue')
lines ( exp(  res3$susiF.obj$fitted_func[[2]]/ sqrt(var(X[, true_pos[2]])   ))-1, col='red')
lines ( exp( res0$fitted_func[[2]])-1 , col='green')
lines (exp( res02$fitted_func[[2]])-1, col='lightblue')
lines (exp( res31$susiF.obj$fitted_func[[2]])-1, col='blue4')
rm(list = ls())
library(mvPoisVA)
library(fsusieR)
library(susieR)
library(ebnm)
lf1_fit <-  list()
lf2_fit <-  list()
for (o in 1:400){
print(o)
data(N3finemapping)
X <- N3finemapping$X
mysd=0.1
N =200
genotype <-X[1:N,1:100]
idx <- which( apply( genotype,2, var ) <1e-15)
genotype <- scale( genotype [, -idx])
lev_res =6
count.data  <- list()
L <-2# sample(1:2, size =1)#actual number of effect
lf <-  list()
lf[[1]]<- rep(0.1, 2^6)
lf[[1]][10:20] <-5
lf[[2]]<- rep(0.1, 2^6)
lf[[2]][50:60] <-10
mu= lf[[2]]
x = rpois(length(mu),exp(log(mu)+rnorm(n=length(mu),sd=mysd)))
fit = pois_smooth_split(x,maxiter=30)
plot(x,col='grey80')
lines(exp(fit$Eb))
lines( smashr::smash(haarfisz::hft(x))  , col="green")
lines(lf[[2]])
data(N3finemapping)
X <- N3finemapping$X
genotype <-X[sample(1:nrow(X), size=N),1:100]
idx <- which( apply( genotype,2, var ) <1e-15)
if( length(idx)==0){
X <-genotype
Rtrue <- cor (genotype )
}else{
genotype <- genotype [, -idx]
X <-genotype
}
G<- genotype
X <- (X -0.99*min(X))/(0.5*max(X ))
G <-  (G -0.99*min(G ))/(0.5*max(G ))
tpos <- sample(1:ncol(genotype), replace = FALSE,size=2)
true_pos <- tpos
pos1 <- tpos[1]
pos2 <- tpos[2]
if( length(which(apply(G,2,var)==0))>0){
G <- G[,-which(apply(G,2,var)==0)]
}
# G <- matrix( rnorm(nrow(genotype)*300), nrow = nrow(genotype))
predictor <-rep (0, length(lf[[1]] ))
count.data  <- list()
G[ , true_pos[1]] <-G[ , true_pos[1]] -min(G[ , true_pos[1]] )
G[ , true_pos[2]] <-G[ , true_pos[2]] -min(G[ , true_pos[2]] )
for ( i in 1:N)
{
predictor <-rep (0, length(lf[[1]] ))
for ( l in 1:L){
predictor <-predictor + G[i, true_pos[l]]*lf[[l]]+0.3
}
predictor <- exp( predictor + rnorm(  length(lf[[1]]), sd=mysd))
count.data [[i]] <-   rpois(n= length(lf[[1]]) ,
lambda =predictor  )
}
count.data <- do.call(rbind, count.data)
Y <- count.data
res3<-  acc_Pois_fSuSiE2 (Y=Y,X=X, L=3 , post_processing = "HMM")
res3$susiF.obj$cs
lf1_fit[[o]] <-  exp( res3$susiF.obj$fitted_func[[1]]  )-1
lf2_fit[[o]] <-  exp( res3$susiF.obj$fitted_func[[2]]  )-1
}
lf1_out <- do.call(rbind, lf1_fit)
lf2_out <- do.call(rbind, lf2_fit)
lf_out = lf1_out + lf2_out
lf_out = log(lf_out+1)
plot(lf[[1]]+lf[[2]], ylim= c( -0.2, 12) , col="red")
lines(apply(lf_out, 2, mean) +0.1, col="blue")
for (o in 1: length(lf1_fit)){
lines (lf1_fit[[o]], col="blue")
}
true_pos
plot(lf[[2]], ylim= c( -0.2, 5) , col="red")
for (o in 1: length(lf2_fit)){
lines (lf2_fit[[o]], col="blue")
}
lines(apply(lf_out, 2, mean) +0.1, col="blue")
plot(lf[[1]]+lf[[2]], ylim= c( -0.2, 12) , col="red")
lines(apply(lf_out, 2, mean) +0.1, col="blue")
o
rm(list = ls())
library(mvPoisVA)
library(fsusieR)
library(susieR)
library(ebnm)
lf1_fit <-  list()
lf2_fit <-  list()
for (o in 1:400){
print(o)
data(N3finemapping)
X <- N3finemapping$X
mysd=0.5
N =200
genotype <-X[1:N,1:100]
idx <- which( apply( genotype,2, var ) <1e-15)
genotype <- scale( genotype [, -idx])
lev_res =6
count.data  <- list()
L <-2# sample(1:2, size =1)#actual number of effect
lf <-  list()
lf[[1]]<- rep(0.1, 2^6)
lf[[1]][10:20] <-5
lf[[2]]<- rep(0.1, 2^6)
lf[[2]][50:60] <-10
mu= lf[[2]]
x = rpois(length(mu),exp(log(mu)+rnorm(n=length(mu),sd=mysd)))
fit = pois_smooth_split(x,maxiter=30)
plot(x,col='grey80')
lines(exp(fit$Eb))
lines( smashr::smash(haarfisz::hft(x))  , col="green")
lines(lf[[2]])
data(N3finemapping)
X <- N3finemapping$X
genotype <-X[sample(1:nrow(X), size=N),1:100]
idx <- which( apply( genotype,2, var ) <1e-15)
if( length(idx)==0){
X <-genotype
Rtrue <- cor (genotype )
}else{
genotype <- genotype [, -idx]
X <-genotype
}
G<- genotype
X <- (X -0.99*min(X))/(0.5*max(X ))
G <-  (G -0.99*min(G ))/(0.5*max(G ))
tpos <- sample(1:ncol(genotype), replace = FALSE,size=2)
true_pos <- tpos
pos1 <- tpos[1]
pos2 <- tpos[2]
if( length(which(apply(G,2,var)==0))>0){
G <- G[,-which(apply(G,2,var)==0)]
}
# G <- matrix( rnorm(nrow(genotype)*300), nrow = nrow(genotype))
predictor <-rep (0, length(lf[[1]] ))
count.data  <- list()
G[ , true_pos[1]] <-G[ , true_pos[1]] -min(G[ , true_pos[1]] )
G[ , true_pos[2]] <-G[ , true_pos[2]] -min(G[ , true_pos[2]] )
for ( i in 1:N)
{
predictor <-rep (0, length(lf[[1]] ))
for ( l in 1:L){
predictor <-predictor + G[i, true_pos[l]]*lf[[l]]+0.3
}
predictor <- exp( predictor + rnorm(  length(lf[[1]]), sd=mysd))
count.data [[i]] <-   rpois(n= length(lf[[1]]) ,
lambda =predictor  )
}
count.data <- do.call(rbind, count.data)
Y <- count.data
res3<-  acc_Pois_fSuSiE2 (Y=Y,X=X, L=3 , post_processing = "HMM")
res3$susiF.obj$cs
lf1_fit[[o]] <-  exp( res3$susiF.obj$fitted_func[[1]]  )-1
lf2_fit[[o]] <-  exp( res3$susiF.obj$fitted_func[[2]]  )-1
}
lf1_out <- do.call(rbind, lf1_fit)
lf2_out <- do.call(rbind, lf2_fit)
lf_out = lf1_out + lf2_out
lf_out = log(lf_out+1)
plot(lf[[1]]+lf[[2]], ylim= c( -0.2, 12) , col="red")
lines(apply(lf_out, 2, mean) +0.1, col="blue")
for (o in 1: length(lf1_fit)){
lines (lf1_fit[[o]], col="blue")
}
true_pos
plot(lf[[2]], ylim= c( -0.2, 5) , col="red")
for (o in 1: length(lf2_fit)){
lines (lf2_fit[[o]], col="blue")
}
lf1_out <- do.call(rbind, lf1_fit)
lf2_out <- do.call(rbind, lf2_fit)
lf_out = lf1_out + lf2_out
lf_out = log(lf_out+1)
lf_out
plot(lf[[1]]+lf[[2]], ylim= c( -0.2, 12) , col="red")
lines(apply(lf_out, 2, mean) +0.1, col="blue")
for (o in 1: length(lf1_fit)){
lines (lf1_fit[[o]], col="blue")
}
true_pos
plot(lf[[2]], ylim= c( -0.2, 5) , col="red")
for (o in 1: length(lf2_fit)){
lines (lf2_fit[[o]], col="blue")
}
