predictor <-rep (0, length(lf[[1]] ))
for ( j in 1:N_effect){
predictor <-predictor + Z[i, j]*lf[[j]]
}
intensity[[i]]=predictor
predictor <- exp( predictor+ rnorm(  length(lf[[1]]), sd=mysd))
count.data [[i]] <-   rpois(n= length(lf[[1]]) ,
lambda =predictor  )
}
library(mvPoisVA)
library(fsusieR)
library(susieR)
library(mvPoisVA)
library(fsusieR)
library(susieR)
library(ebnm)
set.seed(1)
'%!in%' <- function(x,y)!('%in%'(x,y))
N =700
data(N3finemapping)
library(mvPoisVA)
library(fsusieR)
library(susieR)
library(ebnm)
set.seed(1)
'%!in%' <- function(x,y)!('%in%'(x,y))
N =700
data(N3finemapping)
Z <- matrix (runif(N*200, min=0,max=1.5), nrow =N, ncol = 200)
mysd=0.2
lev_res =7
count.data  <- list()
N_effect=30
lf <-  list()
for ( j in 1:N_effect){
lf[[j]]<- rep(0.001, 2^lev_res )
start= sample(1:(2^lev_res-11), size=1)
lf[[j]][start:(start+10)] <-1
lf[[j]]=  (lf[[j]])
}
true_pos <- sample(1:ncol(genotype), replace = FALSE,size=2)
plot (lf[[1]], type="l", main=paste ( "effect of SNP",true_pos[1]))
plot (lf[[2]], type="l", main=paste ( "effect of SNP",true_pos[2]))
predictor <-rep (0, length(lf[[1]] ))
count.data  <- list()
intensity= list()
for ( i in 1:N)
{
predictor <-rep (0, length(lf[[1]] ))
for ( j in 1:N_effect){
predictor <-predictor + Z[i, j]*lf[[j]]
}
intensity[[i]]=predictor
predictor <- exp( predictor+ rnorm(  length(lf[[1]]), sd=mysd))
count.data [[i]] <-   rpois(n= length(lf[[1]]) ,
lambda =predictor  )
}
count.data <- do.call(rbind, count.data)
Y <- count.data
image(log(Y))
hist(Y, nclass=100, main="Histogram of the count data")
int= do.call(rbind, intensity)
fit_approach <- "penalized"
ebps_method=c('pois_mean_split')
L=3
L_start=3
reflect =FALSE
verbose=TRUE
n_gh = 10
tol= 1e-3
tol_vga_pois=1e-5
maxit=10
control_mixsqp=  list(verbose=FALSE,
eps = 1e-6,
numiter.em = 4
)
thresh_lowcount=1e-2
prior_mv=  "mixture_normal"
gridmult=sqrt(2)
nullweight.mrash=10
init_pi0_w.mrash=10
cov_lev=0.95
min_purity     =0.5
greedy=TRUE
backfit=TRUE
tol.mrash=1e-3
verbose.mrash=TRUE
maxit.mrash=10
cal_obj.mrash=FALSE
maxit.fsusie=50
cal_obj.fsusie=FALSE
max_SNP_EM     = 100
max_step_EM    = 1
cor_small=TRUE
max.iter=3
nugget=FALSE
##initiatilzation -----
init=TRUE
J = log2(ncol(Y)); if((J%%1) != 0) reflect=TRUE
if(reflect){
tl <- lapply(1:nrow(Y), function(i) reflect_vec(Y[i,]))
Y <- do.call(rbind, lapply(1:length(tl), function(i) tl[[i]]$x))
idx_out <- tl[[1]]$idx #### indx of interest at the end
}else{
idx_out <- 1: ncol(Y)
}
if(fit_approach %in% c('both',"fine_mapping")){
tidx <- which(apply(X,2,var)==0)
if( length(tidx)>0){
warning(paste("Some of the columns of X are constants, we removed" ,length(tidx), "columns"))
X <- X[,-tidx]
}
}
if(fit_approach %in% c('both',"penalized")){
tidx <- which(apply(Z,2,var)==0)
if( length(tidx)>0){
warning(paste("Some of the columns of Z are constants, we removed" ,length(tidx), "columns"))
Z <- Z[,-tidx]
}
}
indx_lst <-  fsusieR::gen_wavelet_indx(log2(ncol(Y)))
init_val_pois<- c(log(Y+1))
beta_pois <- 0* c(log(Y+1))
sigma2_pois=1
##initiatilzation for count data -----
Mu_pm<- Y
iter=1
beta_pois <- 0* c(log(Mu_pm +1))
check <- 3*tol
sigma2_pois=0.1
Mu_pm_init <- log(Mu_pm+1)
##### Poisson Part ----
if (ebps_method =="pois_mean_split" ){
tt <- pois_mean_split(c(Y),
mu_pm_init= c(Mu_pm_init))
Mu_pm <- matrix( tt$posterior$mean_log,byrow = FALSE, ncol=ncol(Y))
}
if(ebps_method =="ind_pois_mean_split" ){
Mu_pm <- matrix(apply(Y,1, function(y) pois_mean_split(y,
mu_pm_init= c(log(y+1)) )$posterior$mean_log),
byrow = TRUE,
ncol=ncol(Y))
}
if(ebps_method =="ind_ebps" ){
Mu_pm <- matrix(apply(Y,1, function(y) ebps(y)$posterior$mean_log),
byrow = TRUE,
ncol=ncol(Y))
}
if(ebps_method =="ind_poisson_smoothing" ){
Mu_pm <- matrix(apply(Y,1, function(y) pois_smooth_split(y,
Eb_init= c(log(y+1)) )$posterior$mean_log),
byrow = TRUE,
ncol=ncol(Y))
}
if (ebps_method =="nugget" ){
Mu_pm <- (fit_latent_nugget(Y)$Y)
}
#### SuSiE part ----
tmp_Mu_pm_pen <- 0* Mu_pm
tmp_Mu_pm_fm  <- 0* Mu_pm
fm_pm          <- 0* Mu_pm
init=FALSE
#### fit EBmvFR ----
if(fit_approach%in% c("both", "penalized")){
tmp_Mu_pm_pen <- Mu_pm  -  fm_pm#potentially run smash on colmean
### TODO: Maybe use better restarting point for EBmvFR.obj
EBmvFR.obj   <-  EBmvFR ( Y=tmp_Mu_pm_pen,
X              = Z,
tol            = tol.mrash,
control_mixsqp = control_mixsqp  ,
nullweight     = nullweight.mrash,
cal_obj        = cal_obj.mrash,
verbose        = FALSE,
maxit          = maxit.mrash,
max_step_EM =1
)
if(verbose){
print( paste('Posterior of EB regression coefficient computed for iter ',iter))
}
b_pm <-   Z%*%  EBmvFR.obj$fitted_func
if( fit_approach== "penalized")
mat_mean <-   matrix(b_pm  , byrow = TRUE,
nrow=nrow(Z), ncol=ncol(Y))
}else{
b_pm <- 0* tmp_Mu_pm_pen
}
if(fit_approach%in% c("both", "fine_mapping")){
tmp_Mu_pm_fm <- Mu_pm -  b_pm#potentially run smash on colmean
susiF.obj     <- susiF (
Y              =  tmp_Mu_pm_fm ,
X               = X ,
L               = L,
tol             = tol,
control_mixsqp  = control_mixsqp ,
nullweight      = nullweight.mrash,
cal_obj         = cal_obj.fsusie,
verbose         = verbose,
cov_lev         = cov_lev,
min_purity      = min_purity,
maxit           = maxit.fsusie ,
cor_small       = cor_small,
post_processing = "HMM")
fm_pm <- X%*%Reduce("+",lapply(1:length(susiF.obj$cs),
function(l)
t(susiF.obj$fitted_func[[l]]%*% t(susiF.obj$alpha[[l]]))
)
)
mat_mean <-   matrix( fm_pm , byrow = TRUE,
nrow=nrow(X), ncol=ncol(Y))
}else{
fm_pm <-0* tmp_Mu_pm_fm
susiF.obj   <- NULL
}
#print(    susiF.obj$cs)
iter=iter+1
tt_all <-exp(Mu_pm   )
if( fit_approach ==   "both" )
{
susiF.obj <- fsusieR::update_cal_pip(susiF.obj)
out <- list( Mu_pm=Mu_pm,
susiF.obj=susiF.obj,
EBmvFR.obj=EBmvFR.obj,
fitted = tt_all[,idx_out] )
}
if( fit_approach ==   "fine_mapping" )
{
susiF.obj <- fsusieR::update_cal_pip(susiF.obj)
out <- list( Mu_pm=Mu_pm,
susiF.obj=susiF.obj,
fitted = tt_all[,idx_out]  )
}
if( fit_approach ==   "penalized")
{
out <- list( Mu_pm=Mu_pm,
EBmvFR.obj=EBmvFR.obj,
fitted = tt_all[,idx_out]  )
}
plot( exp(int) , (Y))
plot(Mu_pm, int)
plot(Z%*%EBmvFR.obj$fitted_func, int)
lm_fit = lm(c(int)~  c( Z%*%EBmvFR.obj$fitted_func))
summary(lm_fit)
plot( exp(Z%*%EBmvFR.obj$fitted_func), Y)
cor( exp(Z%*%EBmvFR.obj$fitted_func), Y)
cor( c(exp(Z%*%EBmvFR.obj$fitted_func)), c(Y))
plot( exp(int) , (Y))
plot(Mu_pm, int)
plot(Z%*%EBmvFR.obj$fitted_func, int)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.width = 5,
fig.height = 3,
fig.align = "center",
fig.cap = "&nbsp;",
dpi = 175
)
rm(list = ls())
library(mvPoisVA)
library(fsusieR)
library(susieR)
library(ebnm)
set.seed(1)
'%!in%' <- function(x,y)!('%in%'(x,y))
N =700
data(N3finemapping)
Z <- matrix (runif(N*200, min=0,max=1.5), nrow =N, ncol = 200)
mysd=0.2
lev_res =7
count.data  <- list()
N_effect=30
lf <-  list()
for ( j in 1:N_effect){
lf[[j]]<- rep(0.001, 2^lev_res )
start= sample(1:(2^lev_res-11), size=1)
lf[[j]][start:(start+10)] <-1
lf[[j]]=  (lf[[j]])
}
true_pos <- sample(1:ncol(genotype), replace = FALSE,size=2)
plot (lf[[1]], type="l", main=paste ( "effect of SNP",true_pos[1]))
plot (lf[[2]], type="l", main=paste ( "effect of SNP",true_pos[2]))
predictor <-rep (0, length(lf[[1]] ))
count.data  <- list()
intensity= list()
for ( i in 1:N)
{
predictor <-rep (0, length(lf[[1]] ))
for ( j in 1:N_effect){
predictor <-predictor + Z[i, j]*lf[[j]]
}
intensity[[i]]=predictor
predictor <- exp( predictor+ rnorm(  length(lf[[1]]), sd=mysd))
count.data [[i]] <-   rpois(n= length(lf[[1]]) ,
lambda =predictor  )
}
count.data <- do.call(rbind, count.data)
Y <- count.data
image(log(Y))
hist(Y, nclass=100, main="Histogram of the count data")
res= acc_Pois_fSuSiE2(Y=Y ,Z=Z)
plot(Z%*%EBmvFR.obj$fitted_func, int)
plot(Z%*%res$EBmvFR.obj$fitted_func, int)
int= do.call(rbind, intensity)
plot(Z%*%res$EBmvFR.obj$fitted_func, int)
lm_fit = lm(c(int)~  c( Z%*%EBmvFR.obj$fitted_func))
plot(Z%*%res$EBmvFR.obj$fitted_func, int)
lm_fit = lm(c(int)~  c( Z%*%res$EBmvFR.obj$fitted_func))
summary(lm_fit)
plot( exp(int) , (Y))
points(exp(Z%*%res$EBmvFR.obj$fitted_func), Y, col="green")
plot(exp(Z%*%res$EBmvFR.obj$fitted_func), Y, col="green")
points( exp(int) , (Y))
rm(list = ls())
library(mvPoisVA)
library(fsusieR)
library(susieR)
library(ebnm)
set.seed(1)
'%!in%' <- function(x,y)!('%in%'(x,y))
N =700
data(N3finemapping)
Z <- matrix (runif(N*200, min=0,max=1.5), nrow =N, ncol = 200)
mysd=0.2
Z2 <- matrix (runif(N*200, min=0,max=1.5), nrow =N, ncol = 200)
predictor <-rep (0, length(lf[[1]] ))
lf
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.width = 5,
fig.height = 3,
fig.align = "center",
fig.cap = "&nbsp;",
dpi = 175
)
rm(list = ls())
library(mvPoisVA)
library(fsusieR)
library(susieR)
library(ebnm)
set.seed(1)
'%!in%' <- function(x,y)!('%in%'(x,y))
N =700
data(N3finemapping)
Z <- matrix (runif(N*200, min=0,max=1.5), nrow =N, ncol = 200)
mysd=0.2
lev_res =7
count.data  <- list()
N_effect=30
lf <-  list()
for ( j in 1:N_effect){
lf[[j]]<- rep(0.001, 2^lev_res )
start= sample(1:(2^lev_res-11), size=1)
lf[[j]][start:(start+10)] <-1
lf[[j]]=  (lf[[j]])
}
true_pos <- sample(1:ncol(genotype), replace = FALSE,size=2)
plot (lf[[1]], type="l", main=paste ( "effect of SNP",true_pos[1]))
plot (lf[[2]], type="l", main=paste ( "effect of SNP",true_pos[2]))
predictor <-rep (0, length(lf[[1]] ))
count.data  <- list()
intensity= list()
for ( i in 1:N)
{
predictor <-rep (0, length(lf[[1]] ))
for ( j in 1:N_effect){
predictor <-predictor + Z[i, j]*lf[[j]]
}
intensity[[i]]=predictor
predictor <- exp( predictor+ rnorm(  length(lf[[1]]), sd=mysd))
count.data [[i]] <-   rpois(n= length(lf[[1]]) ,
lambda =predictor  )
}
count.data <- do.call(rbind, count.data)
Y <- count.data
int= do.call(rbind, intensity)
image(log(Y))
hist(Y, nclass=100, main="Histogram of the count data")
res= acc_Pois_fSuSiE2(Y=Y ,Z=Z)
plot(Z%*%res$EBmvFR.obj$fitted_func, int)
lm_fit = lm(c(int)~  c( Z%*%res$EBmvFR.obj$fitted_func))
summary(lm_fit)
plot(exp(Z%*%res$EBmvFR.obj$fitted_func), Y, col="green")
points( exp(int) , (Y))
Z2 <- matrix (runif(N*200, min=0,max=1.5), nrow =N, ncol = 200)
predictor <-rep (0, length(lf[[1]] ))
count.data2  <- list()
intensity2= list()
for ( i in 1:N)
{
predictor <-rep (0, length(lf[[1]] ))
for ( j in 1:N_effect){
predictor <-predictor + Z[i, j]*lf[[j]]
}
intensity2[[i]]=predictor
predictor <- exp( predictor+ rnorm(  length(lf[[1]]), sd=mysd))
count.data2 [[i]] <-   rpois(n= length(lf[[1]]) ,
lambda =predictor  )
}
count.data2 <- do.call(rbind, count.data2)
Y2 <- count.data2
int2= do.call(rbind, intensity2)
plot(Z2%*%res$EBmvFR.obj$fitted_func, int2)
lm_fit = lm(c(int)~  c( Z2%*%res$EBmvFR.obj$fitted_func))
summary(lm_fit)
plot(Z2%*%res$EBmvFR.obj$fitted_func, int2)
lm_fit = lm(c(int2)~  c( Z2%*%res$EBmvFR.obj$fitted_func))
summary(lm_fit)
plot(exp(Z2%*%res$EBmvFR.obj$fitted_func), Y2, col="green")
points( exp(int2) , (Y2))
lf[[1]]
Z2 <- matrix (runif(N*200, min=0,max=1.5), nrow =N, ncol = 200)
predictor <-rep (0, length(lf[[1]] ))
count.data2  <- list()
intensity2= list()
for ( i in 1:N)
{
predictor <-rep (0, length(lf[[1]] ))
for ( j in 1:N_effect){
predictor <-predictor + Z2[i, j]*lf[[j]]
}
intensity2[[i]]=predictor
predictor <- exp( predictor+ rnorm(  length(lf[[1]]), sd=mysd))
count.data2 [[i]] <-   rpois(n= length(lf[[1]]) ,
lambda =predictor  )
}
count.data2 <- do.call(rbind, count.data2)
Y2 <- count.data2
int2= do.call(rbind, intensity2)
plot(Z2%*%res$EBmvFR.obj$fitted_func, int2)
lm_fit = lm(c(int2)~  c( Z2%*%res$EBmvFR.obj$fitted_func))
summary(lm_fit)
plot(exp(Z2%*%res$EBmvFR.obj$fitted_func), Y2, col="green")
points( exp(int2) , (Y2))
apply(Y,2,mean)
rm(list = ls())
library(mvPoisVA)
library(fsusieR)
library(susieR)
library(ebnm)
set.seed(1)
'%!in%' <- function(x,y)!('%in%'(x,y))
data(N3finemapping)
X <- N3finemapping$X
mysd=0.5
N =70
genotype <-X[1:N,1:100]
data(N3finemapping)
X <- N3finemapping$X
genotype <-X[sample(1:nrow(X), size=N),1:100]
idx <- which( apply( genotype,2, var ) <1e-15)
if( length(idx)==0){
X <-genotype
Rtrue <- cor (genotype )
}else{
genotype <- genotype [, -idx]
X <-genotype
}
G<- genotype
X <- (X -0.99*min(X))/(0.5*max(X ))
G <-  (G -0.99*min(G ))/(0.5*max(G ))
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.width = 5,
fig.height = 3,
fig.align = "center",
fig.cap = "&nbsp;",
dpi = 175
)
idx <- which( apply( genotype,2, var ) <1e-15)
if ( length(idx)>0){
genotype <- genotype [, -idx]
}
lev_res =6
count.data  <- list()
L <-2# sample(1:2, size =1)#actual number of effect
lf <-  list()
lf[[1]]<- rep(0.1, 2^6)
lf[[1]][10:20] <-2
lf[[2]]<- rep(0.1, 2^6)
lf[[2]][50:60] <-2
true_pos <- sample(1:ncol(genotype), replace = FALSE,size=2)
plot (lf[[1]], type="l", main=paste ( "effect of SNP",true_pos[1]))
plot (lf[[2]], type="l", main=paste ( "effect of SNP",true_pos[2]))
pos1 <- true_pos[1]
pos2 <- true_pos[2]
if( length(which(apply(G,2,var)==0))>0){
G <- G[,-which(apply(G,2,var)==0)]
}
# G <- matrix( rnorm(nrow(genotype)*300), nrow = nrow(genotype))
predictor <-rep (0, length(lf[[1]] ))
count.data  <- list()
G[ , true_pos[1]] <-G[ , true_pos[1]] -min(G[ , true_pos[1]] )
G[ , true_pos[2]] <-G[ , true_pos[2]] -min(G[ , true_pos[2]] )
for ( i in 1:N)
{
predictor <-rep (0, length(lf[[1]] ))
for ( l in 1:L){
predictor <-predictor + G[i, true_pos[l]]*lf[[l]]+0.3
}
predictor <- exp( predictor+ rnorm(  length(lf[[1]]), sd=mysd))
count.data [[i]] <-   rpois(n= length(lf[[1]]) ,
lambda =predictor  )
}
count.data <- do.call(rbind, count.data)
Y <- count.data
res01 <-acc_Pois_fSuSiE2 (Y=Y,X=X, L=3 , post_processing = "HMM")
res01$susiF.obj$cs
apply(Y,2,mean)
apply(log(Y),2,mean)
apply( Y ,2,mean)
