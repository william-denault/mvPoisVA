prob = qmat)
}
else if (type == "mult") {
newmat <- round(qmat * mat)
}
dim(newmat) <- dim(mat)
return(newmat)
}
ty=Y
#start <- sample(1:(ncol(Y)-(size+1)), size=1)
#Y <- Y[,(start:(start+size))]
library(susieR)
idx_effect= which.max(apply(Y,2,mean))
X     <-  apply(X, 2, function(x){
x[which(is.na(x))] <- median(x, na.rm=T)
return(x)
})
# removing low MAF
X =X [, -which(apply(X,2, sum)< 2* nrow(X)*0.05)]
X =X [, -which(apply(X,2, sum)> 2*nrow(X)- 2* nrow(X)*0.05)]
genotype <-X
L=2
lf <-  list()
#for(l in 1:L){
#
l=1
lf[[l]] <- rep (0, ncol(Y))
#idx <- sample( size =1,1:(ncol(Y)-(size+1)))
lf[[l]][(idx_effect-size): (idx_effect+size)] <-1
#functional effect for effect l
#}
B <- do.call(cbind, lf)
true_pos=1
Ynew <-  (thin_base(mat =  matrix( as.integer( (Y )), ncol=1024)  ,
designmat = as.matrix(genotype[, true_pos]),
coefmat = B))
plot(log1p(Ynew),  log1p(Y))
plot(apply(log1p(Ynew[which(genotype[, true_pos]==1),]),2,mean), type="l")
lines(apply(log1p(Ynew[which(genotype[, true_pos]==0),]),2,mean), col="red")
plot(apply(X,2, sum))
renom_ind= apply(Ynew,1,sum)
scaling = renom_ind/mean(renom_ind)
Mu_pm_init <- log(Ynew+1)
tt <- pois_mean_split(c(Y),s= rep(1, ncol(Ynew)),
mu_pm_init= c(Mu_pm_init))
Mu_pm <- matrix( tt$posterior$mean_log,byrow = FALSE, ncol=ncol(Y))
ttf=  susiF(Y= Mu_pm,
X=genotype[,1:100],
L=10)
ttf$cs
plot(ttf$fitted_func[[2]])
cs=1
plot(ttf$fitted_func[[cs]], type="l")
lines(ttf$cred_band[[cs]][1,], lty=2)
lines(ttf$cred_band[[cs]][2,], lty=2)
cs=cs+1
plot(ttf$fitted_func[[cs]], type="l")
lines(ttf$cred_band[[cs]][1,], lty=2)
lines(ttf$cred_band[[cs]][2,], lty=2)
cs=cs+1
plot(ttf$fitted_func[[cs]], type="l")
lines(ttf$cred_band[[cs]][1,], lty=2)
lines(ttf$cred_band[[cs]][2,], lty=2)
cs=cs+1
plot(ttf$fitted_func[[cs]], type="l")
lines(ttf$cred_band[[cs]][1,], lty=2)
lines(ttf$cred_band[[cs]][2,], lty=2)
cs=cs+1
Mu_pm <-0*Y
for ( i in 1:nrow(Y)){
Mu_pm[i,]     =  log(pois_smooth_split(Y[i,],s=scaling[i],
Eb_init= c(log(Y[i,]+1)) ) $Emean)
}
Mu_pm
image(Mu_pm)
plot(Mu_pm[1,])
ttf=  susiF(Y= Mu_pm,
X=genotype[,1:100],
L=10)
ttf$cs
plot(apply(log1p(Ynew[which(genotype[, ttf$cs[[cs]][1]]==1),]),2,mean), type="l")
lines(apply(log1p(Ynew[which(genotype[, ttf$cs[[cs]][1]]==0),]),2,mean), col="red")
plot(ttf$fitted_func[[cs]], type="l")
lines(ttf$cred_band[[cs]][1,], lty=2)
lines(ttf$cred_band[[cs]][2,], lty=2)
cs=cs+1
plot(ttf$fitted_func[[cs]], type="l")
ttf$cs
plot(ttf$fitted_func[[2]])
cs=1
plot(ttf$fitted_func[[cs]], type="l")
lines(ttf$cred_band[[cs]][1,], lty=2)
lines(ttf$cred_band[[cs]][2,], lty=2)
cor(X[, c(3,19,32)])
true_pos
cor(X[, c(1,3,19,32)])
plot(ttf$fitted_func[[cs]], type="l")
lines(ttf$cred_band[[cs]][1,], lty=2)
lines(ttf$cred_band[[cs]][2,], lty=2)
plot(ttf$fitted_func[[cs]], type="l")
lines(ttf$cred_band[[cs]][1,], lty=2)
lines(ttf$cred_band[[cs]][2,], lty=2)
cs=cs+1
plot(ttf$fitted_func[[cs]], type="l")
lines(ttf$cred_band[[cs]][1,], lty=2)
lines(ttf$cred_band[[cs]][2,], lty=2)
cs=cs+1
plot(ttf$fitted_func[[cs]], type="l")
lines(ttf$cred_band[[cs]][1,], lty=2)
lines(ttf$cred_band[[cs]][2,], lty=2)
cs=cs+1
plot(ttf$fitted_func[[cs]], type="l")
lines(ttf$cred_band[[cs]][1,], lty=2)
lines(ttf$cred_band[[cs]][2,], lty=2)
cs=cs+1
do.call(c, ttf$cs)
cor(X[,do.call(c, ttf$cs)])
ttf=  susiF(Y= Mu_pm,
X=genotype[,1:1000],
L=10)
plot(ttf$fitted_func[[2]])
cs=1
plot(ttf$fitted_func[[cs]], type="l")
lines(ttf$cred_band[[cs]][1,], lty=2)
lines(ttf$cred_band[[cs]][2,], lty=2)
plot(ttf$fitted_func[[cs]], type="l")
lines(ttf$cred_band[[cs]][1,], lty=2)
lines(ttf$cred_band[[cs]][2,], lty=2)
cs=cs+1
plot(ttf$fitted_func[[cs]], type="l")
lines(ttf$cred_band[[cs]][1,], lty=2)
lines(ttf$cred_band[[cs]][2,], lty=2)
cs=cs+1
plot(ttf$fitted_func[[cs]], type="l")
lines(ttf$cred_band[[cs]][1,], lty=2)
lines(ttf$cred_band[[cs]][2,], lty=2)
cs=cs+1
plot(ttf$fitted_func[[cs]], type="l")
lines(ttf$cred_band[[cs]][1,], lty=2)
lines(ttf$cred_band[[cs]][2,], lty=2)
cs=cs+1
plot(ttf$fitted_func[[cs]], type="l")
lines(ttf$cred_band[[cs]][1,], lty=2)
lines(ttf$cred_band[[cs]][2,], lty=2)
cs=cs+1
plot(ttf$fitted_func[[cs]], type="l")
lines(ttf$cred_band[[cs]][1,], lty=2)
lines(ttf$cred_band[[cs]][2,], lty=2)
cs=cs+1
plot(ttf$fitted_func[[cs]], type="l")
lines(ttf$cred_band[[cs]][1,], lty=2)
lines(ttf$cred_band[[cs]][2,], lty=2)
cs=cs+1
plot(ttf$fitted_func[[cs]], type="l")
lines(ttf$cred_band[[cs]][1,], lty=2)
lines(ttf$cred_band[[cs]][2,], lty=2)
cs=cs+1
plot(ttf$fitted_func[[cs]], type="l")
lines(ttf$cred_band[[cs]][1,], lty=2)
lines(ttf$cred_band[[cs]][2,], lty=2)
cs=cs+1
plot(ttf$fitted_func[[cs]], type="l")
lines(ttf$cred_band[[cs]][1,], lty=2)
lines(ttf$cred_band[[cs]][2,], lty=2)
cs=cs+1
plot(ttf$fitted_func[[cs]], type="l")
Mu_pm
temp = Mu_pm
susie(y= Mu_pm[,88],X=X)
my= susie(y= Mu_pm[,88],X=X)
my$sets
my= susie(y= Mu_pm[,90],X=X)
my$sets
my= susie(y= Mu_pm[,90],X=X)
my$sets
#knitr::opts_chunk$set(
#  collapse = TRUE,
#  comment = "#>",
#  fig.width = 1,
#  fig.height =6,
#  fig.align = "center",
#  fig.cap = "&nbsp;",
#  dpi = 300
#  )
knitr::opts_chunk$set(echo = TRUE)
library(mvPoisVA)
library(fsusieR)
library(susieR)
#example from Dongyue Xie work
set.seed(12345)
n=2^9
sigma=1
mu=c(rep(0.3,n/4), rep(3, n/4), rep(10, n/4), rep(0.3, n/4))
plot(mu, type="l", main="Underlying intensity")
set.seed(123)
x = rpois(length(mu),exp(log(mu)+rnorm(n=length(mu),sd=sigma)))
fit = pois_smooth_split(x,maxiter=30)
fit_ebps = ebps(x)
fit_pois = pois_mean_split(x)
plot(mu, type="l",main="Underlying intensity")
lines(fit_ebps$posterior$mean_smooth, col= "orange2", lwd=1.5)
lines(exp(fit$Eb), col= "blue3", lwd=1.5)
lines(mu, lwd=1.5)
legend(x="topleft", legend=c("Poisson smoothing", "EBPS", "Split Poisson",   "True"),
col=c("blue3", "orange2",   "darkgreen", "black"),
lwd=1.5)
library(susieR)
data <- readRDS("C:/Document/Serieux/Travail/Data_analysis_and_papers/anjing_data/xiong_atact_seq_multi_trait.12regions.51.2kb_expanded.binned_coverage_count.rds")
X=data[[1]]$filtered_geno
su(is.na(X))
sum(is.na(X))
for ( k in 1:ncol(X)){
if ( sum(is.na(X[,k]))>0){
X[which(is.na(X[,k])),k]= median(X[-which(is.na(X[,k])),k])
}
}
X= X[-which (apply(X,2,sum)<10),]
dim(X)
X=data[[1]]$filtered_geno
sum(is.na(X))
X
for ( k in 1:ncol(X)){
if ( sum(is.na(X[,k]))>0){
X[which(is.na(X[,k])),k]= median(X[-which(is.na(X[,k])),k])
}
}
X= X[,-which (apply(X,2,sum)<10) ]
dim(X
)
library(susieR)
data <- readRDS("C:/Document/Serieux/Travail/Data_analysis_and_papers/anjing_data/xiong_atact_seq_multi_trait.12regions.51.2kb_expanded.binned_coverage_count.rds")
X=data[[1]]$filtered_geno
sum(is.na(X))
X
for ( k in 1:ncol(X)){
if ( sum(is.na(X[,k]))>0){
X[which(is.na(X[,k])),k]= median(X[-which(is.na(X[,k])),k])
}
}
X= X[,-which (apply(X,2,sum)<10) ]
true_pos=1
dl= list()
mu0= mu=c(rep(0.3,n/4), rep(3, n/4), rep(10, n/4), rep(0.3, n/4))
mu1= mu=c(rep(0.3,n/4), rep(3, n/4), rep(5, n/4), rep(0.3, n/4))
mu2=  mu=c(rep(0.3,n/4), rep(3, n/4), rep(2.5, n/4), rep(0.3, n/4))
for ( i in 1:nrow(X)){
if(X[i,true_pos]==0){
dl[[i]]=  rpois(length(mu0),exp(log(mu0)+rnorm(n=length(mu),sd=sigma)))
}
if(X[i,true_pos]==1){
dl[[i]]=  rpois(length(mu1),exp(log(mu1)+rnorm(n=length(mu),sd=sigma)))
}
if(X[i,true_pos]==2){
dl[[i]]=  rpois(length(mu2),exp(log(mu2)+rnorm(n=length(mu),sd=sigma)))
}
}
Y= do.call(rbind, dl)
res=  susif(Y=Y,X=X)
res=  susiF(Y=Y,X=X)
res=  susiF(Y=log1p(Y),X=X)
plot(res$fitted_func[[1]])
res$cs
res=  susiF(Y=log1p(Y),X=X, post_processing = "HMM")
plot(res$fitted_func[[1]])
res=  susiF(Y=log1p(Y),X=X, post_processing = "TI")
plot(res$fitted_func[[1]])
plot(res$fitted_func[[1]])
lines(res$cred_band[[1]][1,])
lines(res$cred_band[[1]][2,])
library(susieR)
set.seed(12345)
n=2^9
sigma=1
data <- readRDS("C:/Document/Serieux/Travail/Data_analysis_and_papers/anjing_data/xiong_atact_seq_multi_trait.12regions.51.2kb_expanded.binned_coverage_count.rds")
X=data[[1]]$filtered_geno
sum(is.na(X))
X
for ( k in 1:ncol(X)){
if ( sum(is.na(X[,k]))>0){
X[which(is.na(X[,k])),k]= median(X[-which(is.na(X[,k])),k])
}
}
X= X[,-which (apply(X,2,sum)<10) ]
true_pos=1
dl= list()
mu0= mu=c(rep(0.3,n/4), rep(3, n/4), rep(10, n/4), rep(0.3, n/4))
mu1= mu=c(rep(0.3,n/4), rep(3, n/4), rep(5, n/4), rep(0.3, n/4))
mu2=  mu=c(rep(0.3,n/4), rep(3, n/4), rep(2.5, n/4), rep(0.3, n/4))
for ( i in 1:nrow(X)){
if(X[i,true_pos]==0){
dl[[i]]=  rpois(length(mu0),exp(log(mu0)+rnorm(n=length(mu),sd=sigma)))
}
if(X[i,true_pos]==1){
dl[[i]]=  rpois(length(mu1),exp(log(mu1)+rnorm(n=length(mu),sd=sigma)))
}
if(X[i,true_pos]==2){
dl[[i]]=  rpois(length(mu2),exp(log(mu2)+rnorm(n=length(mu),sd=sigma)))
}
}
Y= do.call(rbind, dl)
library(fsusieR)
res=  susiF(Y=log1p(Y),X=X, post_processing = "TI")
plot(res$fitted_func[[1]])
lines(res$cred_band[[1]][1,])
lines(res$cred_band[[1]][2,])
res=  susiF(Y=log1p(Y),X=X )
plot(res$fitted_func[[1]])
lines(res$cred_band[[1]][1,])
lines(res$cred_band[[1]][2,])
library(fsusieR)
res=  susiF(Y=log1p(Y),X=X )
plot(res$fitted_func[[1]])
lines(res$cred_band[[1]][1,])
res=  susiF(Y=log1p(Y),X=X )
plot(res$fitted_func[[1]])
lines(res$cred_band[[1]][1,])
lines(res$cred_band[[1]][2,])
res$cred_band[[1]][1,]
library(susieR)
set.seed(12345)
n=2^9
sigma=1
data <- readRDS("C:/Document/Serieux/Travail/Data_analysis_and_papers/anjing_data/xiong_atact_seq_multi_trait.12regions.51.2kb_expanded.binned_coverage_count.rds")
X=data[[1]]$filtered_geno
sum(is.na(X))
X
for ( k in 1:ncol(X)){
if ( sum(is.na(X[,k]))>0){
X[which(is.na(X[,k])),k]= median(X[-which(is.na(X[,k])),k])
}
}
X= X[,-which (apply(X,2,sum)<10) ]
true_pos=1
dl= list()
mu0= mu=c(rep(0.3,n/4), rep(3, n/4), rep(10, n/4), rep(0.3, n/4))
mu1= mu=c(rep(0.3,n/4), rep(3, n/4), rep(5, n/4), rep(0.3, n/4))
mu2=  mu=c(rep(0.3,n/4), rep(3, n/4), rep(2.5, n/4), rep(0.3, n/4))
for ( i in 1:nrow(X)){
if(X[i,true_pos]==0){
dl[[i]]=  rpois(length(mu0),exp(log(mu0)+rnorm(n=length(mu),sd=sigma)))
}
if(X[i,true_pos]==1){
dl[[i]]=  rpois(length(mu1),exp(log(mu1)+rnorm(n=length(mu),sd=sigma)))
}
if(X[i,true_pos]==2){
dl[[i]]=  rpois(length(mu2),exp(log(mu2)+rnorm(n=length(mu),sd=sigma)))
}
}
Y= do.call(rbind, dl)
library(fsusieR)
res=  susiF(Y=log1p(Y),X=X )
plot(res$fitted_func[[1]])
lines(res$cred_band[[1]][1,])
lines(res$cred_band[[1]][2,])
res=  susiF(Y=log1p(Y),X=X, post_processing = "TI" )
plot(res$fitted_func[[1]])
lines(res$cred_band[[1]][1,])
lines(res$cred_band[[1]][2,])
library(susieR)
set.seed(12345)
n=2^9
sigma=1
data <- readRDS("C:/Document/Serieux/Travail/Data_analysis_and_papers/anjing_data/xiong_atact_seq_multi_trait.12regions.51.2kb_expanded.binned_coverage_count.rds")
X=data[[1]]$filtered_geno
sum(is.na(X))
X
for ( k in 1:ncol(X)){
if ( sum(is.na(X[,k]))>0){
X[which(is.na(X[,k])),k]= median(X[-which(is.na(X[,k])),k])
}
}
X= X[,-which (apply(X,2,sum)<10) ]
true_pos=1
dl= list()
mu0= mu=c(rep(0.3,n/4), rep(3, n/4), rep(10, n/4), rep(0.3, n/4))
mu1= mu=c(rep(0.3,n/4), rep(3, n/4), rep(5, n/4), rep(0.3, n/4))
mu2=  mu=c(rep(0.3,n/4), rep(3, n/4), rep(2.5, n/4), rep(0.3, n/4))
for ( i in 1:nrow(X)){
if(X[i,true_pos]==0){
dl[[i]]=  rpois(length(mu0),exp(log(mu0)+rnorm(n=length(mu),sd=sigma)))
}
if(X[i,true_pos]==1){
dl[[i]]=  rpois(length(mu1),exp(log(mu1)+rnorm(n=length(mu),sd=sigma)))
}
if(X[i,true_pos]==2){
dl[[i]]=  rpois(length(mu2),exp(log(mu2)+rnorm(n=length(mu),sd=sigma)))
}
}
Y= do.call(rbind, dl)
library(fsusieR)
res=  susiF(Y=log1p(Y),X=X, post_processing = "TI" )
plot(res$fitted_func[[1]])
lines(res$cred_band[[1]][1,])
lines(res$cred_band[[1]][2,])
res=  susiF(Y=log1p(Y),X=X, post_processing = "smash" )
plot(res$fitted_func[[1]])
lines(res$cred_band[[1]][1,])
lines(res$cred_band[[1]][2,])
plot(res$fitted_func[[1]])
lines(res$cred_band[[1]][1,])
lines(res$cred_band[[1]][2,])
library(susieR)
set.seed(12345)
n=2^9
sigma=1
data <- readRDS("C:/Document/Serieux/Travail/Data_analysis_and_papers/anjing_data/xiong_atact_seq_multi_trait.12regions.51.2kb_expanded.binned_coverage_count.rds")
X=data[[1]]$filtered_geno
sum(is.na(X))
X
for ( k in 1:ncol(X)){
if ( sum(is.na(X[,k]))>0){
X[which(is.na(X[,k])),k]= median(X[-which(is.na(X[,k])),k])
}
}
X= X[,-which (apply(X,2,sum)<10) ]
true_pos=1
dl= list()
mu0= mu=c(rep(0.3,n/4), rep(3, n/4), rep(10, n/4), rep(0.3, n/4))
mu1= mu=c(rep(0.3,n/4), rep(3, n/4), rep(5, n/4), rep(0.3, n/4))
mu2=  mu=c(rep(0.3,n/4), rep(3, n/4), rep(2.5, n/4), rep(0.3, n/4))
for ( i in 1:nrow(X)){
if(X[i,true_pos]==0){
dl[[i]]=  rpois(length(mu0),exp(log(mu0)+rnorm(n=length(mu),sd=sigma)))
}
if(X[i,true_pos]==1){
dl[[i]]=  rpois(length(mu1),exp(log(mu1)+rnorm(n=length(mu),sd=sigma)))
}
if(X[i,true_pos]==2){
dl[[i]]=  rpois(length(mu2),exp(log(mu2)+rnorm(n=length(mu),sd=sigma)))
}
}
Y= do.call(rbind, dl)
library(fsusieR)
res=  susiF(Y=log1p(Y),X=X, post_processing = "TI" )
plot(res$fitted_func[[1]])
lines(res$cred_band[[1]][1,])
lines(res$cred_band[[1]][2,])
res=  susiF(Y=log1p(Y),X=X, post_processing = "smash" )
plot(res$fitted_func[[1]])
lines(res$cred_band[[1]][1,])
lines(res$cred_band[[1]][2,])
plot(res$fitted_func[[1]])
lines(res$cred_band[[1]][1,])
library(susieR)
set.seed(12345)
n=2^9
sigma=1
data <- readRDS("C:/Document/Serieux/Travail/Data_analysis_and_papers/anjing_data/xiong_atact_seq_multi_trait.12regions.51.2kb_expanded.binned_coverage_count.rds")
X=data[[1]]$filtered_geno
sum(is.na(X))
X
for ( k in 1:ncol(X)){
if ( sum(is.na(X[,k]))>0){
X[which(is.na(X[,k])),k]= median(X[-which(is.na(X[,k])),k])
}
}
X= X[,-which (apply(X,2,sum)<10) ]
true_pos=1
dl= list()
mu0= mu=c(rep(0.3,n/4), rep(3, n/4), rep(10, n/4), rep(0.3, n/4))
mu1= mu=c(rep(0.3,n/4), rep(3, n/4), rep(5, n/4), rep(0.3, n/4))
mu2=  mu=c(rep(0.3,n/4), rep(3, n/4), rep(2.5, n/4), rep(0.3, n/4))
for ( i in 1:nrow(X)){
if(X[i,true_pos]==0){
dl[[i]]=  rpois(length(mu0),exp(log(mu0)+rnorm(n=length(mu),sd=sigma)))
}
if(X[i,true_pos]==1){
dl[[i]]=  rpois(length(mu1),exp(log(mu1)+rnorm(n=length(mu),sd=sigma)))
}
if(X[i,true_pos]==2){
dl[[i]]=  rpois(length(mu2),exp(log(mu2)+rnorm(n=length(mu),sd=sigma)))
}
}
Y= do.call(rbind, dl)
res=  susiF(Y=log1p(Y),X=X[,1:100], post_processing = "smash" )
library(fsusieR)
res=  susiF(Y=log1p(Y),X=X[,1:100], post_processing = "smash" )
res=  susiF(Y=log1p(Y),X=X[,1:100], post_processing = "smash" )
plot(res$fitted_func[[1]])
lines(res$cred_band[[1]][1,])
lines(res$cred_band[[1]][2,])
plot(res$fitted_func[[2]])
lines(res$cred_band[[2]][1,])
lines(res$cred_band[2]][2,])
lines(res$cred_band[[2]][2,])
res=  susiF(Y=log1p(Y),X=X, post_processing = "TI" )
plot(res$fitted_func[[1]])
lines(res$cred_band[[1]][1,])
lines(res$cred_band[[1]][2,])
res=  susiF(Y=log1p(Y),X=X , post_processing = "smash" )
plot(res$fitted_func[[2]])
plot(res$fitted_func[[1]])
lines(res$cred_band[[1]][1,])
lines(res$cred_band[[1]][2,])
library(mvPoisVA)
res=  acc_Pois_fSuSiE2 (Y= (Y),X=X , post_processing = "smash" )
plot(res$fitted_func[[1]])
res$susiF.obj$fitted_func[[1]]
plot(res$susiF.obj$fitted_func[[1]])
res=  acc_Pois_fSuSiE2 (Y= (Y),X=X , post_processing = "TIh" )
res= acc_Pois_fSuSiE2(Y=log1p(Y),X=X, post_processing = "TI" )
plot(res$fitted_func[[1]])
plot(res$susiF.obj$fitted_func[[1]])
lines(res$susiF.obj$cred_band[[1]][1,])
lines(res$susiF.obj$cred_band[[1]][2,])
res=  acc_Pois_fSuSiE2 (Y= (Y),X=X , post_processing = "smash" )
plot(res$susiF.obj$fitted_func[[1]])
lines(res$susiF.obj$cred_band[[1]][1,])
lines(res$susiF.obj$cred_band[[1]][2,])
library(fsusieR)
susiF()
susiF
