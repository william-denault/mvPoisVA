lol[1:8,1:10]
sig <- x
sig
n = length(sig)
J = log2(n)
dmat = matrix(0, nrow = J + 1, ncol = n)
dmat[1, ] = sig
dmat
D=0
nD = 2^(J - D)
nDo2 = nD/2
twonD = 2 * nD
nD
nDo2
twonD
ind = (l * nD + 1):((l + 1) * nD)
ind2 = (l * twonD + 1):((l + 1) * twonD)
l=0
ind = (l * nD + 1):((l + 1) * nD)
ind2 = (l * twonD + 1):((l + 1) * twonD)
ind2
ind
ind2 = (l * twonD + 1):((l + 1) * twonD)
x = dmat[D + 1, ind]
x
ind = (l * nD + 1):((l + 1) * nD)
ind2 = (l * twonD + 1):((l + 1) * twonD)
x = dmat[D + 1, ind]
x
sig
ind
lsumx = x[seq(from = 1, to = nD - 1, by = 2)] +
x[seq(from = 2, to = nD, by = 2)]
seq(from = 1, to = nD - 1, by = 2)
x[seq(from = 1, to = nD - 1, by = 2)]
x[seq(from = 2, to = nD, by = 2)]
rx = rshift(x)
rsumx = rx[seq(from = 1, to = nD - 1, by = 2)] +
rx[seq(from = 2, to = nD, by = 2)]
dmat[D + 2, ind] = c(lsumx, rsumx)
dmat2[D + 1, ind2] = c(x, rx)
n = length(sig)
J = log2(n)
dmat = matrix(0, nrow = J + 1, ncol = n)
dmat[1, ] = sig
# Initialize the parent table.
dmat2 = matrix(0, nrow = J, ncol = 2 * n)
for (D in 0:(J - 1)) {
nD = 2^(J - D)
nDo2 = nD/2
twonD = 2 * nD
for (l in 0:(2^D - 1)) {
ind = (l * nD + 1):((l + 1) * nD)
ind2 = (l * twonD + 1):((l + 1) * twonD)
x = dmat[D + 1, ind]
lsumx = x[seq(from = 1, to = nD - 1, by = 2)] +
x[seq(from = 2, to = nD, by = 2)]
rx = rshift(x)
rsumx = rx[seq(from = 1, to = nD - 1, by = 2)] +
rx[seq(from = 2, to = nD, by = 2)]
dmat[D + 2, ind] = c(lsumx, rsumx)
dmat2[D + 1, ind2] = c(x, rx)
}
}
dmat2
dmat
y = as.vector(t(ParentTItable(x)$parent))
y
x
x <- sig
y = as.vector(t(ParentTItable(x)$parent))
y
J <- log2(length(x))
J <- log2(length(x))
s=0
nD = 2^(J - s)
nD
nDo2 = nD/2
#data
N=100
Tp <- 64
Y <-matrix( rpois(N*Tp, lambda = 2), ncol=Tp)
indx_lst <-  susiF.alpha::gen_wavelet_indx(ncol(Y))
Y <-matrix( rpois(N*Tp, lambda = 2), ncol=Tp)
gen_wavelet_indx
susiF.alpha::gen_wavelet_indx
indx_lst <-  susiF.alpha::gen_wavelet_indx(log2(ncol(Y)))
reflect =FALSE
Tp <- 64
Tp <- 63
Y <-matrix( rpois(N*Tp, lambda = 2), ncol=Tp)
J = log2(ncol(Y)); if((J%%1) != 0) reflect=TRUE
relfect_vec <- function (x)
{
n = length(x)
J = log2(n)
if ((J%%1) == 0) {
x = c(x, x[n:1])
return(list(x = x, idx = 1:n))
}
else {
n.ext = 2^ceiling(J)
lnum = round((n.ext - n)/2)
rnum = n.ext - n - lnum
if (lnum == 0) {
x.lmir = NULL
}
else {
x.lmir = x[lnum:1]
}
if (rnum == 0) {
x.rmir = NULL
}
else {
x.rmir = x[n:(n - rnum + 1)]
}
x.ini = c(x.lmir, x, x.rmir)
x.mir = x.ini[n.ext:1]
x = c(x.ini, x.mir)
return(list(x = x, idx = (lnum + 1):(lnum + n)))
}
}
tl <- lapply(1:nrow(Y), function(i) reflect_vec(Y[i,]))
relfect_vec <- function (x)
{
n = length(x)
J = log2(n)
if ((J%%1) == 0) {
x = c(x, x[n:1])
return(list(x = x, idx = 1:n))
}
else {
n.ext = 2^ceiling(J)
lnum = round((n.ext - n)/2)
rnum = n.ext - n - lnum
if (lnum == 0) {
x.lmir = NULL
}
else {
x.lmir = x[lnum:1]
}
if (rnum == 0) {
x.rmir = NULL
}
else {
x.rmir = x[n:(n - rnum + 1)]
}
x.ini = c(x.lmir, x, x.rmir)
x.mir = x.ini[n.ext:1]
x = c(x.ini, x.mir)
return(list(x = x, idx = (lnum + 1):(lnum + n)))
}
}
tl <- lapply(1:nrow(Y), function(i) reflect_vec(Y[i,]))
reflect_vec <- function (x)
{
n = length(x)
J = log2(n)
if ((J%%1) == 0) {
x = c(x, x[n:1])
return(list(x = x, idx = 1:n))
}
else {
n.ext = 2^ceiling(J)
lnum = round((n.ext - n)/2)
rnum = n.ext - n - lnum
if (lnum == 0) {
x.lmir = NULL
}
else {
x.lmir = x[lnum:1]
}
if (rnum == 0) {
x.rmir = NULL
}
else {
x.rmir = x[n:(n - rnum + 1)]
}
x.ini = c(x.lmir, x, x.rmir)
x.mir = x.ini[n.ext:1]
x = c(x.ini, x.mir)
return(list(x = x, idx = (lnum + 1):(lnum + n)))
}
}
tl <- lapply(1:nrow(Y), function(i) reflect_vec(Y[i,]))
tl
Y <- do.call(rbind, lapply(1:length(tl), function(i) tl[[i]]$x))
Y
### data formating ------
#data
N=100
reflect =FALSE
Tp <- 63
Y <-matrix( rpois(N*Tp, lambda = 2), ncol=Tp)
J = log2(ncol(Y)); if((J%%1) != 0) reflect=TRUE
if(reflect){
tl <- lapply(1:nrow(Y), function(i) reflect_vec(Y[i,]))
Y <- do.call(rbind, lapply(1:length(tl), function(i) tl[[i]]$x))
idx_out <- tl[[1]]$idx
}
indx_lst <-  susiF.alpha::gen_wavelet_indx(log2(ncol(Y)))
#' @param x a vector of count of length of 2^S
#' @param indx_list a list generated susiF.alpha::gen_wavelet_indx
#' sort intensity in the same order than wavelthresh package, allow use of susiF.alpha routines
get_empirical_intensity <- function(x,indx_lst)
{
J <- log2(length(x))
Y_min <- rep(NA, length(x))
Y_tot <-  rep(NA, length(x))
for (s in 0 :(J-1)){
nD = 2^(J - s)
nDo2 = nD/2
twonD = 2 * nD
tt <-1
for( l in 0:(2^s-1)){
print(s)
ind <- (l * nD + 1):((l + 1) * nD)
#print(paste("ind ",ind))
ind_len <-  length(ind)
ind_l = ind[1:(ind_len/2)]
#print(paste("ind_l ", ind_l))
Y_min[indx_lst[[(s+1)]][tt]]  <-  sum(x[ind_l])
Y_tot[indx_lst[[(s+1)]][tt]]  <-  sum(x[ind])
tt <- tt+1
}
}
sx <- sum(x)
Y_min[length(x)] <- sx
Y_tot[length(x)] <- sx
return(list(Y_min= Y_min,
Y_tot= Y_tot)
)
}
tl <-  lapply(1:nrow(Y), function(i)
get_empirical_intensity(Y[i,],
indx_lst = indx_lst)
)
rm(tl)
#data simulation
N=100
Y <-matrix( rpois(N*Tp, lambda = 2), ncol=Tp)
reflect =FALSE
verbose=TRUE
J = log2(ncol(Y)); if((J%%1) != 0) reflect=TRUE
if(reflect){
tl <- lapply(1:nrow(Y), function(i) reflect_vec(Y[i,]))
Y <- do.call(rbind, lapply(1:length(tl), function(i) tl[[i]]$x))
idx_out <- tl[[1]]$idx
}
indx_lst <-  susiF.alpha::gen_wavelet_indx(log2(ncol(Y)))
tl <-  lapply(1:nrow(Y), function(i)
get_empirical_intensity(Y[i,],
indx_lst = indx_lst)
)
Y_min <- do.call(rbind, lapply(1:length(tl), function(i) tl[[i]]$Y_min))
Y_tol <- do.call(rbind, lapply(1:length(tl), function(i) tl[[i]]$Y_min))
rm(tl)
if(verbose){
print("done transforming data")
}
#' @param x a vector of count of length of 2^S
#' @param indx_list a list generated susiF.alpha::gen_wavelet_indx
#' sort intensity in the same order than wavelthresh package, allow use of susiF.alpha routines
get_empirical_intensity <- function(x,indx_lst)
{
J <- log2(length(x))
Y_min <- rep(NA, length(x))
Y_tot <-  rep(NA, length(x))
for (s in 0 :(J-1)){
nD = 2^(J - s)
nDo2 = nD/2
twonD = 2 * nD
tt <-1
for( l in 0:(2^s-1)){
#  print(s)
ind <- (l * nD + 1):((l + 1) * nD)
#print(paste("ind ",ind))
ind_len <-  length(ind)
ind_l = ind[1:(ind_len/2)]
#print(paste("ind_l ", ind_l))
Y_min[indx_lst[[(s+1)]][tt]]  <-  sum(x[ind_l])
Y_tot[indx_lst[[(s+1)]][tt]]  <-  sum(x[ind])
tt <- tt+1
}
}
sx <- sum(x)
Y_min[length(x)] <- sx
Y_tot[length(x)] <- sx
return(list(Y_min= Y_min,
Y_tot= Y_tot)
)
}
#### From other package -----
log1pexp = function (x){
indx <- .bincode(x, c(-Inf, -37, 18, 33.3, Inf), right = TRUE,
include.lowest = TRUE)
kk <- which(indx == 1)
if (length(kk)) {
x[kk] <- exp(x[kk])
}
kk <- which(indx == 2)
if (length(kk)) {
x[kk] <- log1p(exp(x[kk]))
}
kk <- which(indx == 3)
if (length(kk)) {
x[kk] <- x[kk] + exp(-x[kk])
}
return(x)
}
reflect_vec <- function (x)
{
n = length(x)
J = log2(n)
if ((J%%1) == 0) {
x = c(x, x[n:1])
return(list(x = x, idx = 1:n))
}
else {
n.ext = 2^ceiling(J)
lnum = round((n.ext - n)/2)
rnum = n.ext - n - lnum
if (lnum == 0) {
x.lmir = NULL
}
else {
x.lmir = x[lnum:1]
}
if (rnum == 0) {
x.rmir = NULL
}
else {
x.rmir = x[n:(n - rnum + 1)]
}
x.ini = c(x.lmir, x, x.rmir)
x.mir = x.ini[n.ext:1]
x = c(x.ini, x.mir)
return(list(x = x, idx = (lnum + 1):(lnum + n)))
}
}
#data simulation
N=1000
Tp <- 63
Y <-matrix( rpois(N*Tp, lambda = 2), ncol=Tp)
### data formating ------
reflect =FALSE
verbose=TRUE
J = log2(ncol(Y)); if((J%%1) != 0) reflect=TRUE
if(reflect){
tl <- lapply(1:nrow(Y), function(i) reflect_vec(Y[i,]))
Y <- do.call(rbind, lapply(1:length(tl), function(i) tl[[i]]$x))
idx_out <- tl[[1]]$idx
}
indx_lst <-  susiF.alpha::gen_wavelet_indx(log2(ncol(Y)))
tl <-  lapply(1:nrow(Y), function(i)
get_empirical_intensity(Y[i,],
indx_lst = indx_lst)
)
Y_min <- do.call(rbind, lapply(1:length(tl), function(i) tl[[i]]$Y_min))
Y_tol <- do.call(rbind, lapply(1:length(tl), function(i) tl[[i]]$Y_min))
rm(tl)
if(verbose){
print("done transforming data")
}
# get the mat
Y_min
mu <- 0*Y
# get the matrix for Binomial reg (and Pois reg for top coefficient)
fit_ash = ashr::ash(rep(0,500),1,lik=lik_binom(x,nb,link='identity'))
Mu_pm = logit(Y_min/Y_tot) #Y_min/Y_tot
logit <- function( p)
{
if( p>1 & p<0)
{
print(" p must be between 0 and 1, introducing NA")
out <-NA
}
else{
out <- log( p/(1-p))
}
return(out)
}
Mu_pm = logit(Y_min/Y_tot) #Y_min/Y_tot
#data simulation
N=1000
Tp <- 63
Y <-matrix( rpois(N*Tp, lambda = 2), ncol=Tp)
### parameters/arguments
#b_pm_init start posterior mean
reflect =FALSE
verbose=TRUE
n_gh = 10 #nb points for Gauss Hermite quadrature
### data formating ------
if(is.null(b_pm_init)){
b_pm = 0*Y
}else{
b_pm = b_pm_init #posterior mean
}
#data simulation
N=1000
Tp <- 63
Y <-matrix( rpois(N*Tp, lambda = 2), ncol=Tp)
### parameters/arguments
#b_pm_init start posterior mean
reflect =FALSE
verbose=TRUE
n_gh = 10 #nb points for Gauss Hermite quadrature
b_pm = 0*Y
gh_points = gaussHermiteData(n_gh)
J = log2(ncol(Y)); if((J%%1) != 0) reflect=TRUE
gh_points = fastGHQuad::gaussHermiteData(n_gh)
J = log2(ncol(Y)); if((J%%1) != 0) reflect=TRUE
if(reflect){
tl <- lapply(1:nrow(Y), function(i) reflect_vec(Y[i,]))
Y <- do.call(rbind, lapply(1:length(tl), function(i) tl[[i]]$x))
idx_out <- tl[[1]]$idx #### indx of interest at the end
}
indx_lst <-  susiF.alpha::gen_wavelet_indx(log2(ncol(Y)))
tl <-  lapply(1:nrow(Y), function(i)
get_empirical_intensity(Y[i,],
indx_lst = indx_lst)
)
Y_min <- do.call(rbind, lapply(1:length(tl), function(i) tl[[i]]$Y_min))
Y_tot <- do.call(rbind, lapply(1:length(tl), function(i) tl[[i]]$Y_min))
rm(tl)
if(verbose){
print("done transforming data")
}
Mu_pm = logit(Y_min/Y_tot) #Y_min/Y_tot
Y_min/Y_tot
#data simulation
N=1000
Tp <- 63
Y <-matrix( rpois(N*Tp, lambda = 2), ncol=Tp)
### parameters/arguments
#b_pm_init start posterior mean
reflect =FALSE
verbose=TRUE
n_gh = 10 #nb points for Gauss Hermite quadrature
### data formating ------
b_pm = 0*Y
# if(missing(b_pm_init)){
#   b_pm = 0*Y
# }else{
#   b_pm = b_pm_init #posterior mean
# }
gh_points = fastGHQuad::gaussHermiteData(n_gh)
J = log2(ncol(Y)); if((J%%1) != 0) reflect=TRUE
if(reflect){
tl <- lapply(1:nrow(Y), function(i) reflect_vec(Y[i,]))
Y <- do.call(rbind, lapply(1:length(tl), function(i) tl[[i]]$x))
idx_out <- tl[[1]]$idx #### indx of interest at the end
}
indx_lst <-  susiF.alpha::gen_wavelet_indx(log2(ncol(Y)))
tl <-  lapply(1:nrow(Y), function(i)
get_empirical_intensity(Y[i,],
indx_lst = indx_lst)
)
Y_min <- do.call(rbind, lapply(1:length(tl), function(i) tl[[i]]$Y_min))
Y_tot <- do.call(rbind, lapply(1:length(tl), function(i) tl[[i]]$Y_tot))
rm(tl)
if(verbose){
print("done transforming data")
}
# get the matrix for Binomial reg (and Pois reg for top coefficient)
Mu_pm = logit(Y_min/Y_tot) #Y_min/Y_tot
Y_min/Y_tot
Mu_pm = logit((Y_min/Y_tot)[,-ncol(Y_min)]) #Y_min/Y_tot
(Y_min/Y_tot)[,-ncol(Y_min)]
hist((Y_min/Y_tot)[,-ncol(Y_min)])
min(c((Y_min/Y_tot)[,-ncol(Y_min)])
)
min(c((Y_min/Y_tot)[,-ncol(Y_min)]), na.rm=TRUE)
#data simulation
N=1000
Tp <- 63
Y <-matrix( rpois(N*Tp, lambda = 20), ncol=Tp)
### parameters/arguments
#b_pm_init start posterior mean
reflect =FALSE
verbose=TRUE
n_gh = 10 #nb points for Gauss Hermite quadrature
b_pm = 0*Y
gh_points = fastGHQuad::gaussHermiteData(n_gh)
J = log2(ncol(Y)); if((J%%1) != 0) reflect=TRUE
if(reflect){
tl <- lapply(1:nrow(Y), function(i) reflect_vec(Y[i,]))
Y <- do.call(rbind, lapply(1:length(tl), function(i) tl[[i]]$x))
idx_out <- tl[[1]]$idx #### indx of interest at the end
}
indx_lst <-  susiF.alpha::gen_wavelet_indx(log2(ncol(Y)))
tl <-  lapply(1:nrow(Y), function(i)
get_empirical_intensity(Y[i,],
indx_lst = indx_lst)
)
Y_min <- do.call(rbind, lapply(1:length(tl), function(i) tl[[i]]$Y_min))
Y_tot <- do.call(rbind, lapply(1:length(tl), function(i) tl[[i]]$Y_tot))
rm(tl)
if(verbose){
print("done transforming data")
}
Mu_pm = logit((Y_min/Y_tot)[,-ncol(Y_min)]) #Y_min/Y_tot
#PB which 0 count bin
Mu_pm[mu_pm==-Inf] = logit(0.1)
#PB which 0 count bin
Mu_pm[which(is.nat(Mu_pm))] =logit(0.5)
Mu_pm = logit((Y_min/Y_tot)[,-ncol(Y_min)]) #Y_min/Y_tot
logit((Y_min/Y_tot)[,-ncol(Y_min)])
max( ((Y_min/Y_tot)[,-ncol(Y_min)]))
min( ((Y_min/Y_tot)[,-ncol(Y_min)]))
hist(((Y_min/Y_tot)[,-ncol(Y_min)]))
logit((Y_min/Y_tot)[,-ncol(Y_min)])
