"0","rm(list = ls())"
"0","library(mvPoisVA)"
"0","library(susiF.alpha)"
"2","
Attaching package: ‘susiF.alpha’

"
"2","The following object is masked from ‘package:mvPoisVA’:

    Eloglik

"
"2","The following objects are masked from ‘package:fsusieR’:

    affected_reg, cal_clfsr, cal_clfsr.mixture_normal, cal_clfsr.mixture_normal_per_scale, cal_cor_cs, cal_KL_l,
    cal_KL_l.susiF, cal_lik, cal_partial_resid, cal_partial_resid.EBmvFR, cal_partial_resid.susiF, cal_purity, cal_zeta,
    check_cs, check_cs.susiF, colScale, discard_cs, discard_cs.susiF, EBmvFR, EBmvFR.workhorse, Eloglik, Eloglik.susiF,
    estimate_residual_variance, estimate_residual_variance.EBmvFR, estimate_residual_variance.susiF, gen_wavelet_indx,
    get_ER2, get_ER2.EBmvFR, get_ER2.susiF, get_fitted_effect, get_fitted_effect.susiF, get_G_prior, get_G_prior.susiF,
    get_objective, get_objective.susiF, get_pi_G_prior, get_pi_G_prior.mixture_normal,
    get_pi_G_prior.mixture_normal_per_scale, get_pi0, get_pi0.pi_mixture_normal, get_pi0.pi_mixture_normal_per_scale,
    get_sd_G_prior, get_sd_G_prior.mixture_normal, get_sd_G_prior.mixture_normal_per_scale, greedy_backfit,
    greedy_backfit.susiF, HMM_regression, HMM_regression.susiF, init_EBmvFR_obj, init_prior, init_susiF_obj, L_mixsq,
    L_mixsq.mixture_normal, L_mixsq.mixture_normal_per_scale, log_BF, log_BF.mixture_normal,
    log_BF.mixture_normal_per_scale, loglik_SFR, loglik_SFR.susiF, loglik_SFR_post, loglik_SFR_post.susiF, m_step,
    m_step.lik_mixture_normal, m_step.lik_mixture_normal_per_scale, merge_effect, merge_effect.susiF, out_prep,
    out_prep.EBmvFR, out_prep.susiF, plot_susiF, post_mat_mean, post_mat_mean.mixture_normal,
    post_mat_mean.mixture_normal_per_scale, post_mat_sd, post_mat_sd.mixture_normal,
    post_mat_sd.mixture_normal_per_scale, remap_data, simu_IBSS_ash_vanilla, simu_IBSS_per_level, susiF, susiF.workhorse,
    test_stop_cond, test_stop_cond.EBmvFR, test_stop_cond.susiF, TI_regression, TI_regression.susiF, update_alpha,
    update_alpha.susiF, update_alpha_hist, update_alpha_hist.susiF, update_ash_pi, update_cal_cs, update_cal_cs.susiF,
    update_cal_fit_func, update_cal_fit_func.EBmvFR, update_cal_fit_func.susiF, update_cal_pip, update_cal_pip.susiF,
    update_ELBO, update_ELBO.susiF, update_KL, update_KL.susiF, update_lBF, update_lBF.susiF, update_lfsr,
    update_lfsr.susiF, update_lfsr_effect, update_lfsr_effect.susiF, update_prior, update_prior.mixture_normal,
    update_prior.mixture_normal_per_scale, update_residual_variance, update_residual_variance.EBmvFR,
    update_residual_variance.susiF, which_dummy_cs, which_dummy_cs.susiF, which_lowcount

"
"0","library(susieR)"
"0","library(ebnm)"
"0","set.seed(1)"
"0","'%!in%' <- function(x,y)!('%in%'(x,y))"
"0","data(N3finemapping)"
"0","X <- N3finemapping$X"
"0","mysd=2"
"0","N =70"
"0","genotype <-X[1:N,1:100]"
"0","data(N3finemapping)"
"0","X <- N3finemapping$X"
"0","genotype <-X[sample(1:nrow(X), size=N),1:100]"
"0",""
"0","idx <- which( apply( genotype,2, var ) <1e-15)"
"0","if( length(idx)==0){"
"0","  X <-genotype"
"0",""
"0","  Rtrue <- cor (genotype )"
"0","}else{"
"0","  genotype <- genotype [, -idx]"
"0","  X <-genotype"
"0",""
"0","}"
"0","G<- genotype"
"0","X <- (X -0.99*min(X))/(0.5*max(X ))"
"0",""
"0","G <-  (G -0.99*min(G ))/(0.5*max(G ))"
